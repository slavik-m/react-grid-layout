{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///react-grid-layout.min.js","webpack:///webpack/bootstrap eee5caa5f87b547e6ce9","webpack:///./index-dev.js","webpack:///external {\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\",\"root\":\"React\"}","webpack:///./lib/utils.js","webpack:///./lib/mixins/PureDeepRenderMixin.js","webpack:///./~/object-assign/index.js","webpack:///./lib/ReactGridLayout.jsx","webpack:///./lib/mixins/WidthListeningMixin.js","webpack:///./~/react-draggable/index.js","webpack:///./~/react-resizable/build/Resizable.js","webpack:///./~/react/lib/ReactComponentWithPureRenderMixin.js","webpack:///./lib/GridItem.jsx","webpack:///./lib/ResponsiveReactGridLayout.jsx","webpack:///./lib/responsiveUtils.js","webpack:///./~/deep-equal/index.js","webpack:///./~/deep-equal/lib/is_arguments.js","webpack:///./~/deep-equal/lib/keys.js","webpack:///./~/react-draggable/lib/draggable.js","webpack:///./~/react-draggable/lib/getPrefix.js","webpack:///./~/react-draggable/~/classnames/index.js","webpack:///./~/react-draggable/~/object-assign/index.js","webpack:///./~/react-resizable/build/ResizableBox.js","webpack:///./~/react-resizable/build/cloneElement.js","webpack:///./~/react-resizable/index.js","webpack:///./~/react/lib/cloneWithProps.js","webpack:///./~/react/lib/shallowEqual.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Responsive","assign","utils","bottom","layout","bottomY","max","i","len","length","y","h","clone","obj","collides","l1","l2","x","w","compact","verticalCompact","compareWith","getStatics","out","sorted","sortLayoutItemsByRowCol","l","compactItem","push","indexOf","moved","getFirstCollision","correctBounds","bounds","collidesWith","cols","getLayoutItem","layoutItem","getAllCollisions","moveElement","isUserAction","movingUp","undefined","reverse","collisions","collision","moveElementAwayFromCollision","itemToMove","fakeItem","Math","perc","num","setTransform","style","coords","round","replace","transform","WebkitTransform","MozTransform","msTransform","OTransform","concat","sort","a","b","synchronizeLayoutWithChildren","initialLayout","children","Array","isArray","child","exists","key","g","props","_grid","validateLayout","min","contextName","subProps","Error","j","deepEqual","PureDeepRenderMixin","shouldComponentUpdate","nextProps","nextState","state","ToObject","val","TypeError","Object","target","source","from","keys","to","s","arguments","_objectWithoutProperties","prototype","hasOwnProperty","_extends","React","GridItem","WidthListeningMixin","ReactGridLayout","createClass","displayName","mixins","propTypes","autoSize","PropTypes","bool","number","draggableCancel","string","draggableHandle","propName","componentName","layouts","margin","array","rowHeight","isDraggable","isResizable","useCSSTransforms","onLayoutChange","func","onDragStart","onDrag","onDragStop","onResizeStart","onResize","onResizeStop","node","apply","Children","forEach","list","getDefaultProps","getInitialState","activeDrag","isMounted","width","initialWidth","oldDragItem","oldResizeItem","componentDidMount","setState","componentWillReceiveProps","onWidthChange","JSON","stringify","componentDidUpdate","prevProps","prevState","containerHeight","_ref","e","element","position","_ref2","oldL","placeholder","_ref3","_ref4","size","_ref5","_ref6","createElement","isPlaceholder","className","containerWidth","processGridItem","draggable","resizable","moveOnStartChange","cancel","handle","usePercentages","render","_props","height","map","listenToWindowResize","window","addEventListener","onWindowResize","componentWillUnmount","removeEventListener","getDOMNode","offsetWidth","calcWH","initialHeight","left","top","Draggable","PureRenderMixin","cloneElement","isRequired","handleSize","draggableOpts","object","constraintsToBounds","resizing","refs","resetState","mins","minConstraints","maxes","maxConstraints","Infinity","right","resizeHandler","handlerName","me","ref","onStop","onStart","shallowEqual","ReactComponentWithPureRenderMixin","constraintError","name","cloneWithProps","Resizable","minW","maxW","minH","maxH","calcPosition","calcXY","floor","createStyle","pos","mixinDraggable","start","onDragHandler","mixinResizable","maxWidth","onResizeHandler","_me$calcXY","_me$calcWH","join","responsiveUtils","ResponsiveReactGridLayout","breakpoint","breakpoints","k","onBreakpointChange","lg","md","sm","xs","xxs","getBreakpointFromWidth","getColsFromBreakpoint","findOrGenerateResponsiveLayout","newLayout","verticalLayout","newState","parse","sortBreakpoints","matching","breakpointName","lastBreakpoint","breakpointsSorted","breakpointsAbove","slice","isUndefinedOrNull","value","isBuffer","copy","objEquiv","opts","isArguments","pSlice","ka","objectKeys","kb","actual","expected","Date","getTime","strict","supported","toString","unsupported","propertyIsEnumerable","supportsArgumentsClass","shim","createUIEvent","_pendingState","clientY","clientX","canDragX","axis","canDragY","isFunction","findInArray","callback","matchesSelector","el","selector","matchesSelectorFunc","method","getControlPosition","targetTouches","addEvent","event","handler","attachEvent","removeEvent","detachEvent","outerHeight","clientHeight","computedStyle","getComputedStyle","int","borderTopWidth","borderBottomWidth","outerWidth","clientWidth","borderLeftWidth","borderRightWidth","innerHeight","paddingTop","paddingBottom","innerWidth","paddingLeft","paddingRight","isNum","isNaN","parseInt","getBoundPosition","parent","parentNode","nodeStyle","parentStyle","offsetLeft","marginLeft","offsetTop","marginTop","snapToGrid","grid","pendingX","pendingY","addUserSelectStyles","enableUserSelectHack","document","body","getAttribute","setAttribute","userSelectStyle","removeUserSelectStyles","createCSSTransform","browserPrefix","createSVGTransform","args","emptyFunction","classNames","eventsFor","touch","move","end","mouse","dragEventFor","toLowerCase","oneOf","oneOfType","shape","Number","arrayOf","zIndex","onMouseDown","newProps","findDOMNode","SVGElement","isElementSVG","handleDrag","handleDragEnd","NaN","currentState","dragging","offsetX","offsetY","handleDragStart","touchIdentifier","identifier","shouldStart","dragPoint","scrollX","scrollLeft","scrollY","scrollTop","handleScroll","changedTouches","shouldUpdate","ev","preventDefault","onTouchStart","childStyle","svgTransform","touchHacks","touchAction","react-draggable-dragging","react-draggable-dragged","dragged","only","onMouseUp","onTouchEnd","styles","documentElement","pre","match","OLink","toUpperCase","__WEBPACK_AMD_DEFINE_RESULT__","classes","arg","argType","hasOwn","substr","toObject","propIsEnumerable","symbols","getOwnPropertySymbols","_slicedToArray","arr","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","err","lockAspectRatio","aspectRatio","_this","widthChanged","heightChanged","_preserveAspectRatio","preserveAspectRatio","_preserveAspectRatio2","ResizableBox","mergeProps","currentProps","childProps","extend","RESERVED","resolve","fn","src","joinClasses","version","split","parseFloat","MockLegacyFactory","constructor","ConvenienceConstructor","isReactLegacyFactory","type","objA","objB"],"mappings":"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","file":"react-grid-layout.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactGridLayout\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"ReactGridLayout\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactGridLayout\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"ReactGridLayout\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(5);\n\tmodule.exports.Responsive = __webpack_require__(11);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar assign = __webpack_require__(4);\n\t\n\tvar utils = module.exports = {\n\t\n\t  /**\n\t   * Return the bottom coordinate of the layout.\n\t   *\n\t   * @param  {Array} layout Layout array.\n\t   * @return {Number}       Bottom coordinate.\n\t   */\n\t  bottom: function bottom(layout) {\n\t    var max = 0,\n\t        bottomY;\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      bottomY = layout[i].y + layout[i].h;\n\t      if (bottomY > max) max = bottomY;\n\t    }\n\t    return max;\n\t  },\n\t\n\t  /**\n\t   * Clones a shallow object.\n\t   * @param  {Object} obj Object to clone.\n\t   * @return {Object}   Cloned object.\n\t   */\n\t  clone: function clone(obj) {\n\t    return assign({}, obj);\n\t  },\n\t\n\t  /**\n\t   * Given two layouts, check if they collide.\n\t   *\n\t   * @param  {Object} l1 Layout object.\n\t   * @param  {Object} l2 Layout object.\n\t   * @return {Boolean}   True if colliding.\n\t   */\n\t  collides: function collides(l1, l2) {\n\t    if (l1 === l2) return false; // same element\n\t    if (l1.x + l1.w <= l2.x) return false; // l1 is left of l2\n\t    if (l1.x >= l2.x + l2.w) return false; // l1 is right of l2\n\t    if (l1.y + l1.h <= l2.y) return false; // l1 is above l2\n\t    if (l1.y >= l2.y + l2.h) return false; // l1 is below l2\n\t    return true; // boxes overlap\n\t  },\n\t\n\t  /**\n\t   * Given a layout, compact it. This involves going down each y coordinate and removing gaps\n\t   * between items.\n\t   *\n\t   * @param  {Array} layout Layout.\n\t   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n\t   *   vertically.\n\t   * @return {Array}       Compacted Layout.\n\t   */\n\t  compact: function compact(layout, verticalCompact) {\n\t    // Statics go in the compareWith array right away so items flow around them.\n\t    var compareWith = utils.getStatics(layout),\n\t        out = [];\n\t    // We go through the items by row and column.\n\t    var sorted = utils.sortLayoutItemsByRowCol(layout);\n\t\n\t    for (var i = 0, len = sorted.length; i < len; i++) {\n\t      var l = sorted[i];\n\t\n\t      // Don't move static elements\n\t      if (!l['static']) {\n\t        l = utils.compactItem(compareWith, l, verticalCompact);\n\t\n\t        // Add to comparison array. We only collide with items before this one.\n\t        // Statics are already in this array.\n\t        compareWith.push(l);\n\t      }\n\t\n\t      // Add to output array to make sure they still come out in the right order.\n\t      out[layout.indexOf(l)] = l;\n\t\n\t      // Clear moved flag, if it exists.\n\t      delete l.moved;\n\t    }\n\t\n\t    return out;\n\t  },\n\t\n\t  compactItem: function compactItem(compareWith, l, verticalCompact) {\n\t    if (verticalCompact) {\n\t      // Move the element up as far as it can go without colliding.\n\t      while (l.y > 0 && !utils.getFirstCollision(compareWith, l)) {\n\t        l.y--;\n\t      }\n\t    }\n\t\n\t    // Move it down, and keep moving it down if it's colliding.\n\t    var collides;\n\t    while (collides = utils.getFirstCollision(compareWith, l)) {\n\t      l.y = collides.y + collides.h;\n\t    }\n\t    return l;\n\t  },\n\t\n\t  /**\n\t   * Given a layout, make sure all elements fit within its bounds.\n\t   *\n\t   * @param  {Array} layout Layout array.\n\t   * @param  {Number} bounds Number of columns.\n\t   * @return {[type]}        [description]\n\t   */\n\t  correctBounds: function correctBounds(layout, bounds) {\n\t    var collidesWith = utils.getStatics(layout);\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      var l = layout[i];\n\t      // Overflows right\n\t      if (l.x + l.w > bounds.cols) l.x = bounds.cols - l.w;\n\t      // Overflows left\n\t      if (l.x < 0) {\n\t        l.x = 0;\n\t        l.w = bounds.cols;\n\t      }\n\t      if (!l['static']) collidesWith.push(l);else {\n\t        // If this is static and collides with other statics, we must move it down.\n\t        // We have to do something nicer than just letting them overlap.\n\t        while (utils.getFirstCollision(collidesWith, l)) {\n\t          l.y++;\n\t        }\n\t      }\n\t    }\n\t    return layout;\n\t  },\n\t\n\t  /**\n\t   * Get a layout item by ID. Used so we can override later on if necessary.\n\t   *\n\t   * @param  {Array}  layout Layout array.\n\t   * @param  {Number} id     ID\n\t   * @return {LayoutItem}    Item at ID.\n\t   */\n\t  getLayoutItem: function getLayoutItem(layout, id) {\n\t    id = \"\" + id;\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (\"\" + layout[i].i === id) return layout[i];\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Returns the first item this layout collides with.\n\t   * It doesn't appear to matter which order we approach this from, although\n\t   * perhaps that is the wrong thing to do.\n\t   *\n\t   * @param  {Object} layoutItem Layout item.\n\t   * @return {Object|undefined}  A colliding layout item, or undefined.\n\t   */\n\t  getFirstCollision: function getFirstCollision(layout, layoutItem) {\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (utils.collides(layout[i], layoutItem)) return layout[i];\n\t    }\n\t  },\n\t\n\t  getAllCollisions: function getAllCollisions(layout, layoutItem) {\n\t    var out = [];\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (utils.collides(layout[i], layoutItem)) out.push(layout[i]);\n\t    }\n\t    return out;\n\t  },\n\t\n\t  /**\n\t   * Get all static elements.\n\t   * @param  {Array} layout Array of layout objects.\n\t   * @return {Array}        Array of static layout items..\n\t   */\n\t  getStatics: function getStatics(layout) {\n\t    var out = [];\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (layout[i]['static']) out.push(layout[i]);\n\t    }\n\t    return out;\n\t  },\n\t\n\t  /**\n\t   * Move an element. Responsible for doing cascading movements of other elements.\n\t   *\n\t   * @param  {Array}      layout Full layout to modify.\n\t   * @param  {LayoutItem} l      element to move.\n\t   * @param  {Number}     [x]    X position in grid units.\n\t   * @param  {Number}     [y]    Y position in grid units.\n\t   * @param  {Boolean}    [isUserAction] If true, designates that the item we're moving is\n\t   *                                     being dragged/resized by th euser.\n\t   */\n\t  moveElement: function moveElement(layout, l, x, y, isUserAction) {\n\t    if (l['static']) return layout;\n\t\n\t    // Short-circuit if nothing to do.\n\t    if (l.y === y && l.x === x) return layout;\n\t\n\t    var movingUp = l.y > y;\n\t    // This is quite a bit faster than extending the object\n\t    if (x !== undefined) l.x = x;\n\t    if (y !== undefined) l.y = y;\n\t    l.moved = true;\n\t\n\t    // If this collides with anything, move it.\n\t    // When doing this comparison, we have to sort the items we compare with\n\t    // to ensure, in the case of multiple collisions, that we're getting the\n\t    // nearest collision.\n\t    var sorted = utils.sortLayoutItemsByRowCol(layout);\n\t    if (movingUp) sorted = sorted.reverse();\n\t    var collisions = utils.getAllCollisions(sorted, l);\n\t\n\t    // Move each item that collides away from this element.\n\t    for (var i = 0, len = collisions.length; i < len; i++) {\n\t      var collision = collisions[i];\n\t      // console.log('resolving collision between', l.i, 'at', l.y, 'and', collision.i, 'at', collision.y);\n\t\n\t      // Short circuit so we can't infinite loop\n\t      if (collision.moved) continue;\n\t\n\t      // This makes it feel a bit more precise by waiting to swap for just a bit when moving up.\n\t      if (l.y > collision.y && l.y - collision.y > collision.h / 4) continue;\n\t\n\t      // Don't move static items - we have to move *this* element away\n\t      if (collision['static']) {\n\t        layout = utils.moveElementAwayFromCollision(layout, collision, l, isUserAction);\n\t      } else {\n\t        layout = utils.moveElementAwayFromCollision(layout, l, collision, isUserAction);\n\t      }\n\t    }\n\t\n\t    return layout;\n\t  },\n\t\n\t  /**\n\t   * This is where the magic needs to happen - given a collision, move an element away from the collision.\n\t   * We attempt to move it up if there's room, otherwise it goes below.\n\t   *\n\t   * @param  {Array} layout            Full layout to modify.\n\t   * @param  {LayoutItem} collidesWith Layout item we're colliding with.\n\t   * @param  {LayoutItem} itemToMove   Layout item we're moving.\n\t   * @param  {Boolean} [isUserAction]  If true, designates that the item we're moving is being dragged/resized\n\t   *                                   by the user.\n\t   */\n\t  moveElementAwayFromCollision: function moveElementAwayFromCollision(layout, collidesWith, itemToMove, isUserAction) {\n\t\n\t    // If there is enough space above the collision to put this element, move it there.\n\t    // We only do this on the main collision as this can get funky in cascades and cause\n\t    // unwanted swapping behavior.\n\t    if (isUserAction) {\n\t      // Make a mock item so we don't modify the item here, only modify in moveElement.\n\t      var fakeItem = {\n\t        x: itemToMove.x,\n\t        y: itemToMove.y,\n\t        w: itemToMove.w,\n\t        h: itemToMove.h\n\t      };\n\t      fakeItem.y = Math.max(collidesWith.y - itemToMove.h, 0);\n\t      if (!utils.getFirstCollision(layout, fakeItem)) {\n\t        return utils.moveElement(layout, itemToMove, undefined, fakeItem.y);\n\t      }\n\t    }\n\t\n\t    // Previously this was optimized to move below the collision directly, but this can cause problems\n\t    // with cascading moves, as an item may actually leapflog a collision and cause a reversal in order.\n\t    return utils.moveElement(layout, itemToMove, undefined, itemToMove.y + 1);\n\t  },\n\t\n\t  /**\n\t   * Helper to convert a number to a percentage string.\n\t   *\n\t   * @param  {Number} num Any number\n\t   * @return {String}     That number as a percentage.\n\t   */\n\t  perc: function perc(num) {\n\t    return num * 100 + '%';\n\t  },\n\t\n\t  setTransform: function setTransform(style, coords) {\n\t    // Replace unitless items with px\n\t    var x = ('' + Math.round(coords[0])).replace(/(\\d)$/, '$1px');\n\t    var y = ('' + Math.round(coords[1])).replace(/(\\d)$/, '$1px');\n\t    style.transform = \"translate(\" + x + \",\" + y + \")\";\n\t    style.WebkitTransform = \"translate(\" + x + \",\" + y + \")\";\n\t    style.MozTransform = \"translate(\" + x + \",\" + y + \")\";\n\t    style.msTransform = \"translate(\" + x + \",\" + y + \")\";\n\t    style.OTransform = \"translate(\" + x + \",\" + y + \")\";\n\t    return style;\n\t  },\n\t\n\t  /**\n\t   * Get layout items sorted from top left to right and down.\n\t   *\n\t   * @return {Array} Array of layout objects.\n\t   * @return {Array}        Layout, sorted static items first.\n\t   */\n\t  sortLayoutItemsByRowCol: function sortLayoutItemsByRowCol(layout) {\n\t    return [].concat(layout).sort(function (a, b) {\n\t      if (a.y > b.y || a.y === b.y && a.x > b.x) {\n\t        return 1;\n\t      }\n\t      return -1;\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Generate a layout using the initialLayout and children as a template.\n\t   * Missing entries will be added, extraneous ones will be truncated.\n\t   *\n\t   * @param  {Array}  initialLayout Layout passed in through props.\n\t   * @param  {String} breakpoint    Current responsive breakpoint.\n\t   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n\t   *   vertically.\n\t   * @return {Array}                Working layout.\n\t   */\n\t  synchronizeLayoutWithChildren: function synchronizeLayoutWithChildren(initialLayout, children, cols, verticalCompact) {\n\t    // ensure 'children' is always an array\n\t    if (!Array.isArray(children)) {\n\t      children = [children];\n\t    }\n\t    initialLayout = initialLayout || [];\n\t\n\t    // Generate one layout item per child.\n\t    var layout = [];\n\t    for (var i = 0, len = children.length; i < len; i++) {\n\t      var child = children[i];\n\t      // Don't overwrite if it already exists.\n\t      var exists = utils.getLayoutItem(initialLayout, child.key);\n\t      if (exists) {\n\t        // Ensure 'i' is always a string\n\t        exists.i = '' + exists.i;\n\t        layout.push(exists);\n\t        continue;\n\t      }\n\t      // New item: attempt to use a layout item from the child, if it exists.\n\t      var g = child.props._grid;\n\t      if (g) {\n\t        utils.validateLayout([g], 'ReactGridLayout.child');\n\t        // Validated; add it to the layout. Bottom 'y' possible is the bottom of the layout.\n\t        // This allows you to do nice stuff like specify {y: Infinity}\n\t        if (verticalCompact) {\n\t          layout.push(assign({}, g, { y: Math.min(utils.bottom(layout), g.y), i: child.key }));\n\t        } else {\n\t          layout.push(assign({}, g, { y: g.y, i: child.key }));\n\t        }\n\t      } else {\n\t        // Nothing provided: ensure this is added to the bottom\n\t        layout.push({ w: 1, h: 1, x: 0, y: utils.bottom(layout), i: child.key });\n\t      }\n\t    }\n\t\n\t    // Correct the layout.\n\t    layout = utils.correctBounds(layout, { cols: cols });\n\t    layout = utils.compact(layout, verticalCompact);\n\t\n\t    return layout;\n\t  },\n\t\n\t  /**\n\t   * Validate a layout. Throws errors.\n\t   *\n\t   * @param  {Array}  layout        Array of layout items.\n\t   * @param  {String} [contextName] Context name for errors.\n\t   * @throw  {Error}                Validation error.\n\t   */\n\t  validateLayout: function validateLayout(layout, contextName) {\n\t    contextName = contextName || \"Layout\";\n\t    var subProps = ['x', 'y', 'w', 'h'];\n\t    if (!Array.isArray(layout)) throw new Error(contextName + \" must be an array!\");\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      for (var j = 0; j < subProps.length; j++) {\n\t        if (typeof layout[i][subProps[j]] !== 'number') {\n\t          throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].' + subProps[j] + ' must be a Number!');\n\t        }\n\t      }\n\t      if (layout[i]['static'] !== undefined && typeof layout[i]['static'] !== 'boolean') {\n\t        throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].static must be a Boolean!');\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar deepEqual = __webpack_require__(13);\n\t\n\t// Like PureRenderMixin, but with deep comparisons.\n\tvar PureDeepRenderMixin = {\n\t  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {\n\t    return !deepEqual(this.props, nextProps) || !deepEqual(this.state, nextState);\n\t  }\n\t};\n\t\n\tmodule.exports = PureDeepRenderMixin;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction ToObject(val) {\n\t\tif (val == null) {\n\t\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t\t}\n\t\n\t\treturn Object(val);\n\t}\n\t\n\tmodule.exports = Object.assign || function (target, source) {\n\t\tvar from;\n\t\tvar keys;\n\t\tvar to = ToObject(target);\n\t\n\t\tfor (var s = 1; s < arguments.length; s++) {\n\t\t\tfrom = arguments[s];\n\t\t\tkeys = Object.keys(Object(from));\n\t\n\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\tto[keys[i]] = from[keys[i]];\n\t\t\t}\n\t\t}\n\t\n\t\treturn to;\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\t\n\tvar React = __webpack_require__(1);\n\tvar GridItem = __webpack_require__(10);\n\tvar utils = __webpack_require__(2);\n\tvar PureDeepRenderMixin = __webpack_require__(3);\n\tvar WidthListeningMixin = __webpack_require__(6);\n\t\n\t/**\n\t * A reactive, fluid grid layout with draggable, resizable components.\n\t */\n\tvar ReactGridLayout = React.createClass({\n\t  displayName: 'ReactGridLayout',\n\t\n\t  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\t\n\t  propTypes: {\n\t    //\n\t    // Basic props\n\t    //\n\t\n\t    // If true, the container height swells and contracts to fit contents\n\t    autoSize: React.PropTypes.bool,\n\t    // # of cols.\n\t    cols: React.PropTypes.number,\n\t\n\t    // A selector that will not be draggable.\n\t    draggableCancel: React.PropTypes.string,\n\t    // A selector for the draggable handler\n\t    draggableHandle: React.PropTypes.string,\n\t\n\t    // If true, the layout will compact vertically\n\t    verticalCompact: React.PropTypes.bool,\n\t\n\t    // layout is an array of object with the format:\n\t    // {x: Number, y: Number, w: Number, h: Number, i: Number}\n\t    layout: function layout(props, propName, componentName) {\n\t      var layout = props.layout;\n\t      // I hope you're setting the _grid property on the grid items\n\t      if (layout === undefined) return;\n\t      utils.validateLayout(layout, 'layout');\n\t    },\n\t\n\t    layouts: function layouts(props, propName, componentName) {\n\t      if (props.layouts) {\n\t        throw new Error(\"ReactGridLayout does not use `layouts`: Use ReactGridLayout.Responsive.\");\n\t      }\n\t    },\n\t\n\t    // margin between items [x, y] in px\n\t    margin: React.PropTypes.array,\n\t    // Rows have a static height, but you can change this based on breakpoints if you like\n\t    rowHeight: React.PropTypes.number,\n\t\n\t    //\n\t    // Flags\n\t    //\n\t    isDraggable: React.PropTypes.bool,\n\t    isResizable: React.PropTypes.bool,\n\t    // Use CSS transforms instead of top/left\n\t    useCSSTransforms: React.PropTypes.bool,\n\t\n\t    //\n\t    // Callbacks\n\t    //\n\t\n\t    // Callback so you can save the layout.\n\t    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n\t    onLayoutChange: React.PropTypes.func,\n\t\n\t    // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e).\n\t    // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.\n\t    onDragStart: React.PropTypes.func,\n\t    // Calls on each drag movement.\n\t    onDrag: React.PropTypes.func,\n\t    // Calls when drag is complete.\n\t    onDragStop: React.PropTypes.func,\n\t    //Calls when resize starts.\n\t    onResizeStart: React.PropTypes.func,\n\t    // Calls when resize movement happens.\n\t    onResize: React.PropTypes.func,\n\t    // Calls when resize is complete.\n\t    onResizeStop: React.PropTypes.func,\n\t\n\t    //\n\t    // Other validations\n\t    //\n\t\n\t    // Children must not have duplicate keys.\n\t    children: function children(props, propName, componentName) {\n\t      React.PropTypes.node.apply(this, arguments);\n\t      var children = props[propName];\n\t\n\t      // Check children keys for duplicates. Throw if found.\n\t      var keys = {};\n\t      React.Children.forEach(children, function (child, i, list) {\n\t        if (keys[child.key]) {\n\t          throw new Error(\"Duplicate child key found! This will cause problems in ReactGridLayout.\");\n\t        }\n\t        keys[child.key] = true;\n\t      });\n\t    }\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      autoSize: true,\n\t      cols: 12,\n\t      rowHeight: 150,\n\t      layout: [],\n\t      margin: [10, 10],\n\t      isDraggable: true,\n\t      isResizable: true,\n\t      useCSSTransforms: true,\n\t      verticalCompact: true,\n\t      onLayoutChange: function onLayoutChange() {},\n\t      onDragStart: function onDragStart() {},\n\t      onDrag: function onDrag() {},\n\t      onDragStop: function onDragStop() {},\n\t      onResizeStart: function onResizeStart() {},\n\t      onResize: function onResize() {},\n\t      onResizeStop: function onResizeStop() {}\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      activeDrag: null,\n\t      isMounted: false,\n\t      layout: utils.synchronizeLayoutWithChildren(this.props.layout, this.props.children, this.props.cols, this.props.verticalCompact),\n\t      width: this.props.initialWidth,\n\t      oldDragItem: null,\n\t      oldResizeItem: null\n\t    };\n\t  },\n\t\n\t  componentDidMount: function componentDidMount() {\n\t    // Call back with layout on mount. This should be done after correcting the layout width\n\t    // to ensure we don't rerender with the wrong width.\n\t    this.props.onLayoutChange(this.state.layout);\n\t    this.setState({ isMounted: true });\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t    // This allows you to set the width manually if you like.\n\t    // Use manual width changes in combination with `listenToWindowResize: false`\n\t    if (nextProps.width !== this.props.width) this.onWidthChange(nextProps.width);\n\t\n\t    // If children change, regenerate the layout.\n\t    if (nextProps.children.length !== this.props.children.length) {\n\t      this.setState({\n\t        layout: utils.synchronizeLayoutWithChildren(this.state.layout, nextProps.children, nextProps.cols, this.props.verticalCompact)\n\t      });\n\t    }\n\t\n\t    // Allow parent to set layout directly.\n\t    if (nextProps.layout && JSON.stringify(nextProps.layout) !== JSON.stringify(this.state.layout)) {\n\t      this.setState({\n\t        layout: utils.synchronizeLayoutWithChildren(nextProps.layout, nextProps.children, nextProps.cols, this.props.verticalCompact)\n\t      });\n\t    }\n\t  },\n\t\n\t  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {\n\t    // Call back so we can store the layout\n\t    // Do it only when a resize/drag is not active, otherwise there are way too many callbacks\n\t    if (this.state.layout !== prevState.layout && !this.state.activeDrag) {\n\t      this.props.onLayoutChange(this.state.layout, this.state.layouts);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Calculates a pixel value for the container.\n\t   * @return {String} Container height in pixels.\n\t   */\n\t  containerHeight: function containerHeight() {\n\t    if (!this.props.autoSize) return;\n\t    return utils.bottom(this.state.layout) * this.props.rowHeight + this.props.margin[1] + 'px';\n\t  },\n\t\n\t  /**\n\t   * When the width changes, save it to state. This helps with left/width calculations.\n\t   */\n\t  onWidthChange: function onWidthChange(width) {\n\t    this.setState({ width: width });\n\t  },\n\t\n\t  /**\n\t   * When dragging starts\n\t   * @param {Number} i Index of the child\n\t   * @param {Number} x X position of the move\n\t   * @param {Number} y Y position of the move\n\t   * @param {Event} e The mousedown event\n\t   * @param {Element} element The current dragging DOM element\n\t   * @param {Object} position Drag information\n\t   */\n\t  onDragStart: function onDragStart(i, x, y, _ref) {\n\t    var e = _ref.e;\n\t    var element = _ref.element;\n\t    var position = _ref.position;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t\n\t    this.setState({ oldDragItem: utils.clone(l) });\n\t\n\t    this.props.onDragStart(layout, l, l, null, e);\n\t  },\n\t  /**\n\t   * Each drag movement create a new dragelement and move the element to the dragged location\n\t   * @param {Number} i Index of the child\n\t   * @param {Number} x X position of the move\n\t   * @param {Number} y Y position of the move\n\t   * @param {Event} e The mousedown event\n\t   * @param {Element} element The current dragging DOM element\n\t   * @param {Object} position Drag information\n\t   */\n\t  onDrag: function onDrag(i, x, y, _ref2) {\n\t    var e = _ref2.e;\n\t    var element = _ref2.element;\n\t    var position = _ref2.position;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    var oldL = this.state.oldDragItem;\n\t\n\t    // Create placeholder (display only)\n\t    var placeholder = {\n\t      w: l.w, h: l.h, x: l.x, y: l.y, placeholder: true, i: i\n\t    };\n\t\n\t    // Move the element to the dragged location.\n\t    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\t\n\t    this.props.onDrag(layout, oldL, l, placeholder, e);\n\t\n\t    this.setState({\n\t      layout: utils.compact(layout, this.props.verticalCompact),\n\t      activeDrag: placeholder\n\t    });\n\t  },\n\t\n\t  /**\n\t   * When dragging stops, figure out which position the element is closest to and update its x and y.\n\t   * @param  {Number} i Index of the child.\n\t   * @param {Number} i Index of the child\n\t   * @param {Number} x X position of the move\n\t   * @param {Number} y Y position of the move\n\t   * @param {Event} e The mousedown event\n\t   * @param {Element} element The current dragging DOM element\n\t   * @param {Object} position Drag information\n\t   */\n\t  onDragStop: function onDragStop(i, x, y, _ref3) {\n\t    var e = _ref3.e;\n\t    var element = _ref3.element;\n\t    var position = _ref3.position;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    var oldL = this.state.oldDragItem;\n\t\n\t    // Move the element here\n\t    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\t\n\t    this.props.onDragStop(layout, oldL, l, null, e);\n\t\n\t    // Set state\n\t    this.setState({\n\t      layout: utils.compact(layout, this.props.verticalCompact),\n\t      activeDrag: null,\n\t      oldDragItem: null\n\t    });\n\t  },\n\t\n\t  onResizeStart: function onResizeStart(i, w, h, _ref4) {\n\t    var e = _ref4.e;\n\t    var element = _ref4.element;\n\t    var size = _ref4.size;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t\n\t    this.setState({ oldResizeItem: utils.clone(l) });\n\t\n\t    this.props.onResizeStart(layout, l, l, null, e);\n\t  },\n\t\n\t  onResize: function onResize(i, w, h, _ref5) {\n\t    var e = _ref5.e;\n\t    var element = _ref5.element;\n\t    var size = _ref5.size;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    var oldL = this.state.oldResizeItem;\n\t\n\t    // Set new width and height.\n\t    l.w = w;\n\t    l.h = h;\n\t\n\t    // Create placeholder element (display only)\n\t    var placeholder = {\n\t      w: w, h: h, x: l.x, y: l.y, placeholder: true, i: i\n\t    };\n\t\n\t    this.props.onResize(layout, oldL, l, placeholder, e);\n\t\n\t    // Re-compact the layout and set the drag placeholder.\n\t    this.setState({ layout: utils.compact(layout, this.props.verticalCompact), activeDrag: placeholder });\n\t  },\n\t\n\t  onResizeStop: function onResizeStop(i, x, y, _ref6) {\n\t    var e = _ref6.e;\n\t    var element = _ref6.element;\n\t    var size = _ref6.size;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    var oldL = this.state.oldResizeItem;\n\t\n\t    this.props.onResizeStop(layout, oldL, l, null, e);\n\t\n\t    this.setState({\n\t      layout: utils.compact(layout, this.props.verticalCompact),\n\t      activeDrag: null,\n\t      oldResizeItem: null\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Create a placeholder object.\n\t   * @return {Element} Placeholder div.\n\t   */\n\t  placeholder: function placeholder() {\n\t    if (!this.state.activeDrag) return '';\n\t\n\t    // {...this.state.activeDrag} is pretty slow, actually\n\t    return React.createElement(\n\t      GridItem,\n\t      {\n\t        w: this.state.activeDrag.w,\n\t        h: this.state.activeDrag.h,\n\t        x: this.state.activeDrag.x,\n\t        y: this.state.activeDrag.y,\n\t        i: this.state.activeDrag.i,\n\t        isPlaceholder: true,\n\t        className: 'react-grid-placeholder',\n\t        containerWidth: this.state.width,\n\t        cols: this.props.cols,\n\t        margin: this.props.margin,\n\t        rowHeight: this.props.rowHeight,\n\t        isDraggable: false,\n\t        isResizable: false,\n\t        useCSSTransforms: this.props.useCSSTransforms\n\t      },\n\t      React.createElement('div', null)\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Given a grid item, set its style attributes & surround in a <Draggable>.\n\t   * @param  {Element} child React element.\n\t   * @param  {Number}  i     Index of element.\n\t   * @return {Element}       Element wrapped in draggable and properly placed.\n\t   */\n\t  processGridItem: function processGridItem(child) {\n\t    var i = child.key;\n\t    var l = utils.getLayoutItem(this.state.layout, i);\n\t\n\t    // watchStart property tells Draggable to react to changes in the start param\n\t    // Must be turned off on the item we're dragging as the changes in `activeDrag` cause rerenders\n\t    var moveOnStartChange = !(this.state.activeDrag && this.state.activeDrag.i === i);\n\t\n\t    // Parse 'static'. Any properties defined directly on the grid item will take precedence.\n\t    var draggable, resizable;\n\t    if (l['static'] || this.props.isDraggable === false) draggable = false;\n\t    if (l['static'] || this.props.isResizable === false) resizable = false;\n\t\n\t    return React.createElement(\n\t      GridItem,\n\t      _extends({\n\t        containerWidth: this.state.width,\n\t        cols: this.props.cols,\n\t        margin: this.props.margin,\n\t        rowHeight: this.props.rowHeight,\n\t        moveOnStartChange: moveOnStartChange,\n\t        cancel: this.props.draggableCancel,\n\t        handle: this.props.draggableHandle,\n\t        onDragStop: this.onDragStop,\n\t        onDragStart: this.onDragStart,\n\t        onDrag: this.onDrag,\n\t        onResizeStart: this.onResizeStart,\n\t        onResize: this.onResize,\n\t        onResizeStop: this.onResizeStop,\n\t        isDraggable: draggable,\n\t        isResizable: resizable,\n\t        useCSSTransforms: this.props.useCSSTransforms && this.state.isMounted,\n\t        usePercentages: !this.state.isMounted\n\t      }, l),\n\t      child\n\t    );\n\t  },\n\t\n\t  render: function render() {\n\t    // Calculate classname\n\t    var _props = this.props;\n\t    var className = _props.className;\n\t\n\t    var props = _objectWithoutProperties(_props, ['className']);\n\t\n\t    className = 'react-grid-layout ' + (className || '');\n\t\n\t    return React.createElement(\n\t      'div',\n\t      _extends({}, props, { className: className, style: { height: this.containerHeight() } }),\n\t      React.Children.map(this.props.children, this.processGridItem),\n\t      this.placeholder()\n\t    );\n\t  }\n\t});\n\t\n\tmodule.exports = ReactGridLayout;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar React = __webpack_require__(1);\n\t\n\t/**\n\t * A simple mixin that provides facility for listening to container resizes.\n\t */\n\tvar WidthListeningMixin = {\n\t\n\t  propTypes: {\n\t    // This allows setting this on the server side\n\t    initialWidth: React.PropTypes.number,\n\t\n\t    // If false, you should supply width yourself. Good if you want to debounce resize events\n\t    // or reuse a handler from somewhere else.\n\t    listenToWindowResize: React.PropTypes.bool\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      initialWidth: 1280,\n\t      listenToWindowResize: true\n\t    };\n\t  },\n\t\n\t  componentDidMount: function componentDidMount() {\n\t    if (this.props.listenToWindowResize) {\n\t      window.addEventListener('resize', this.onWindowResize);\n\t      // This is intentional. Once to properly set the breakpoint and resize the elements,\n\t      // and again to compensate for any scrollbar that appeared because of the first step.\n\t      this.onWindowResize();\n\t      this.onWindowResize();\n\t    }\n\t  },\n\t\n\t  componentWillUnmount: function componentWillUnmount() {\n\t    window.removeEventListener('resize', this.onWindowResize);\n\t  },\n\t\n\t  /**\n\t   * On window resize, update width.\n\t   */\n\t  onWindowResize: function onWindowResize() {\n\t    this.onWidthChange(this.getDOMNode().offsetWidth);\n\t  }\n\t\n\t};\n\t\n\tmodule.exports = WidthListeningMixin;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(16);\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar React = __webpack_require__(1);\n\tvar Draggable = __webpack_require__(7);\n\tvar PureRenderMixin = __webpack_require__(9);\n\tvar assign = __webpack_require__(4);\n\tvar cloneElement = __webpack_require__(21);\n\t\n\tvar Resizable = module.exports = React.createClass({\n\t  displayName: 'Resizable',\n\t  mixins: [PureRenderMixin],\n\t\n\t  propTypes: {\n\t    // Require that one and only one child be present.\n\t    children: React.PropTypes.element.isRequired,\n\t    // Functions\n\t    onResizeStop: React.PropTypes.func,\n\t    onResizeStart: React.PropTypes.func,\n\t    onResize: React.PropTypes.func,\n\t\n\t    width: React.PropTypes.number.isRequired,\n\t    height: React.PropTypes.number.isRequired,\n\t    // If you change this, be sure to update your css\n\t    handleSize: React.PropTypes.array,\n\t    // These will be passed wholesale to react-draggable\n\t    draggableOpts: React.PropTypes.object\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      handleSize: [20, 20]\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      bounds: this.constraintsToBounds(),\n\t      initialWidth: this.props.width,\n\t      initialHeight: this.props.height\n\t    };\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(props) {\n\t    if (!this.state.resizing) {\n\t      this.setState({\n\t        initialWidth: props.width,\n\t        initialHeight: props.height,\n\t        bounds: this.constraintsToBounds()\n\t      });\n\t      this.refs.draggable.resetState();\n\t    }\n\t  },\n\t\n\t  constraintsToBounds: function constraintsToBounds() {\n\t    var p = this.props;\n\t    var mins = p.minConstraints || p.handleSize;\n\t    var maxes = p.maxConstraints || [Infinity, Infinity];\n\t    return {\n\t      left: mins[0] - p.width,\n\t      top: mins[1] - p.height,\n\t      right: maxes[0] - p.width,\n\t      bottom: maxes[1] - p.height\n\t    };\n\t  },\n\t\n\t  /**\n\t   * Wrapper around drag events to provide more useful data.\n\t   *\n\t   * @param  {String} handlerName Handler name to wrap.\n\t   * @return {Function}           Handler function.\n\t   */\n\t  resizeHandler: function resizeHandler(handlerName) {\n\t    var me = this;\n\t    return function (e, _ref) {\n\t      var node = _ref.node;\n\t      var position = _ref.position;\n\t\n\t      me.props[handlerName] && me.props[handlerName](e, { node: node, size: calcWH(me.state, position) });\n\t\n\t      if (handlerName === 'onResizeStart') {\n\t        me.setState({ resizing: true });\n\t      } else if (handlerName === 'onResizeStop') {\n\t        me.setState({ resizing: false });\n\t      }\n\t    };\n\t  },\n\t\n\t  render: function render() {\n\t    var p = this.props,\n\t        s = this.state;\n\t\n\t    // What we're doing here is getting the child of this element, and cloning it with this element's props.\n\t    // We are then defining its children as:\n\t    // Its original children (resizable's child's children), and\n\t    // A draggable handle.\n\t    return cloneElement(p.children, assign({}, p, {\n\t      children: [p.children.props.children, React.createElement(\n\t        Draggable,\n\t        _extends({}, p.draggableOpts, {\n\t          ref: 'draggable',\n\t          onStop: this.resizeHandler('onResizeStop'),\n\t          onStart: this.resizeHandler('onResizeStart'),\n\t          onDrag: this.resizeHandler('onResize'),\n\t          bounds: this.state.bounds\n\t        }),\n\t        React.createElement('span', { className: 'react-resizable-handle' })\n\t      )]\n\t    }));\n\t  }\n\t});\n\t\n\t/**\n\t * Parse left and top coordinates.\n\t * @param  {Number} options.left Left coordinate.\n\t * @param  {Number} options.top  Top coordinate.\n\t * @return {Object}              Coordinates\n\t */\n\tfunction calcWH(_ref, _ref2) {\n\t  var initialWidth = _ref.initialWidth;\n\t  var initialHeight = _ref.initialHeight;\n\t  var left = _ref2.left;\n\t  var top = _ref2.top;\n\t\n\t  return { width: initialWidth + left, height: initialHeight + top };\n\t}\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2015, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t* @providesModule ReactComponentWithPureRenderMixin\n\t*/\n\t\n\t'use strict';\n\t\n\tvar shallowEqual = __webpack_require__(24);\n\t\n\t/**\n\t * If your React component's render function is \"pure\", e.g. it will render the\n\t * same result given the same props and state, provide this Mixin for a\n\t * considerable performance boost.\n\t *\n\t * Most React components have pure render functions.\n\t *\n\t * Example:\n\t *\n\t *   var ReactComponentWithPureRenderMixin =\n\t *     require('ReactComponentWithPureRenderMixin');\n\t *   React.createClass({\n\t *     mixins: [ReactComponentWithPureRenderMixin],\n\t *\n\t *     render: function() {\n\t *       return <div className={this.props.className}>foo</div>;\n\t *     }\n\t *   });\n\t *\n\t * Note: This only checks shallow equality for props and state. If these contain\n\t * complex data structures this mixin may have false-negatives for deeper\n\t * differences. Only mixin to components which have simple props and state, or\n\t * use `forceUpdate()` when you know deep data structures have changed.\n\t */\n\tvar ReactComponentWithPureRenderMixin = {\n\t  shouldComponentUpdate: function(nextProps, nextState) {\n\t    return !shallowEqual(this.props, nextProps) ||\n\t           !shallowEqual(this.state, nextState);\n\t  }\n\t};\n\t\n\tmodule.exports = ReactComponentWithPureRenderMixin;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar React = __webpack_require__(1);\n\tvar cloneWithProps = __webpack_require__(23);\n\tvar utils = __webpack_require__(2);\n\tvar Draggable = __webpack_require__(7);\n\tvar Resizable = __webpack_require__(22).Resizable;\n\tvar PureDeepRenderMixin = __webpack_require__(3);\n\t\n\t/**\n\t * An individual item within a ReactGridLayout.\n\t */\n\tvar GridItem = React.createClass({\n\t  displayName: 'GridItem',\n\t\n\t  mixins: [PureDeepRenderMixin],\n\t\n\t  propTypes: {\n\t    // Children must be only a single element\n\t    children: React.PropTypes.element,\n\t\n\t    // General grid attributes\n\t    cols: React.PropTypes.number.isRequired,\n\t    containerWidth: React.PropTypes.number.isRequired,\n\t    rowHeight: React.PropTypes.number.isRequired,\n\t    margin: React.PropTypes.array.isRequired,\n\t\n\t    // These are all in grid units\n\t    x: React.PropTypes.number.isRequired,\n\t    y: React.PropTypes.number.isRequired,\n\t    w: React.PropTypes.number.isRequired,\n\t    h: React.PropTypes.number.isRequired,\n\t\n\t    // All optional\n\t    minW: function minW(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.minW > props.w || props.minW > props.maxW) constraintError('minW', props);\n\t    },\n\t    maxW: function maxW(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.maxW < props.w || props.maxW < props.minW) constraintError('maxW', props);\n\t    },\n\t    minH: function minH(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.minH > props.h || props.minH > props.maxH) constraintError('minH', props);\n\t    },\n\t    maxH: function maxH(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.maxH < props.h || props.maxH < props.minH) constraintError('maxH', props);\n\t    },\n\t\n\t    // ID is nice to have for callbacks\n\t    i: React.PropTypes.string.isRequired,\n\t\n\t    // If true, item will be repositioned when x/y/w/h change\n\t    moveOnStartChange: React.PropTypes.bool,\n\t\n\t    // Functions\n\t    onDragStop: React.PropTypes.func,\n\t    onDragStart: React.PropTypes.func,\n\t    onDrag: React.PropTypes.func,\n\t    onResizeStop: React.PropTypes.func,\n\t    onResizeStart: React.PropTypes.func,\n\t    onResize: React.PropTypes.func,\n\t\n\t    // Flags\n\t    isDraggable: React.PropTypes.bool,\n\t    isResizable: React.PropTypes.bool,\n\t    // Use CSS transforms instead of top/left\n\t    useCSSTransforms: React.PropTypes.bool,\n\t    isPlaceholder: React.PropTypes.bool,\n\t\n\t    // Others\n\t    className: React.PropTypes.string,\n\t    // Selector for draggable handle\n\t    handle: React.PropTypes.string,\n\t    // Selector for draggable cancel (see react-draggable)\n\t    cancel: React.PropTypes.string\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      isDraggable: true,\n\t      isResizable: true,\n\t      useCSSTransforms: true,\n\t      className: '',\n\t      cancel: '',\n\t      minH: 1,\n\t      minW: 1,\n\t      maxH: Infinity,\n\t      maxW: Infinity\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      resizing: false,\n\t      className: ''\n\t    };\n\t  },\n\t\n\t  /**\n\t   * Return position on the page given an x, y, w, h.\n\t   * left, top, width, height are all in pixels.\n\t   * @param  {Number}  x             X coordinate in grid units.\n\t   * @param  {Number}  y             Y coordinate in grid units.\n\t   * @param  {Number}  w             W coordinate in grid units.\n\t   * @param  {Number}  h             H coordinate in grid units.\n\t   * @return {Object}                Object containing coords.\n\t   */\n\t  calcPosition: function calcPosition(x, y, w, h) {\n\t    var p = this.props;\n\t    var width = p.containerWidth - p.margin[0];\n\t    var out = {\n\t      left: width * (x / p.cols) + p.margin[0],\n\t      top: p.rowHeight * y + p.margin[1],\n\t      width: width * (w / p.cols) - p.margin[0],\n\t      height: h * p.rowHeight - p.margin[1]\n\t    };\n\t    return out;\n\t  },\n\t\n\t  /**\n\t   * Translate x and y coordinates from pixels to grid units.\n\t   * @param  {Number} options.left  Left offset in pixels.\n\t   * @param  {Number} options.top   Top offset in pixels.\n\t   * @return {Object}               x and y in grid units.\n\t   */\n\t  calcXY: function calcXY(_ref) {\n\t    var left = _ref.left;\n\t    var top = _ref.top;\n\t\n\t    left = left - this.props.margin[0];\n\t    top = top - this.props.margin[1];\n\t    // This is intentional; because so much of the logic on moving boxes up/down relies\n\t    // on an exact y position, we only round the x, not the y.\n\t    var x = Math.round(left / this.props.containerWidth * this.props.cols);\n\t    var y = Math.floor(top / this.props.rowHeight);\n\t    x = Math.max(Math.min(x, this.props.cols), 0);\n\t    y = Math.max(y, 0);\n\t    return { x: x, y: y };\n\t  },\n\t\n\t  /**\n\t   * Given a height and width in pixel values, calculate grid units.\n\t   * @param  {Number} options.height Height in pixels.\n\t   * @param  {Number} options.width  Width in pixels.\n\t   * @return {Object}                w, h as grid units.\n\t   */\n\t  calcWH: function calcWH(_ref2) {\n\t    var height = _ref2.height;\n\t    var width = _ref2.width;\n\t\n\t    width = width + this.props.margin[0];\n\t    height = height + this.props.margin[1];\n\t    var w = Math.round(width / this.props.containerWidth * this.props.cols);\n\t    var h = Math.round(height / this.props.rowHeight);\n\t    w = Math.max(Math.min(w, this.props.cols - this.props.x), 0);\n\t    h = Math.max(h, 0);\n\t    return { w: w, h: h };\n\t  },\n\t\n\t  /**\n\t   * This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it\n\t   * well when server rendering, and the only way to do that properly is to use percentage width/left because\n\t   * we don't know exactly what the browser viewport is.\n\t   * Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage\n\t   * left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.\n\t   *\n\t   * @param  {Object} pos Position object with width, height, left, top.\n\t   * @return {Object}     Style object.\n\t   */\n\t  createStyle: function createStyle(pos) {\n\t    var style = {\n\t      width: pos.width + 'px',\n\t      height: pos.height + 'px',\n\t      left: pos.left + 'px',\n\t      top: pos.top + 'px',\n\t      position: 'absolute'\n\t    };\n\t\n\t    // This is used for server rendering.\n\t    if (this.props.usePercentages) {\n\t      pos.left = utils.perc(pos.left / this.props.containerWidth);\n\t      style.left = pos.left;\n\t      style.width = utils.perc(pos.width / this.props.containerWidth);\n\t    }\n\t\n\t    // CSS Transforms support\n\t    if (this.props.useCSSTransforms) {\n\t      utils.setTransform(style, [pos.left, pos.top]);\n\t      delete style.left;\n\t      delete style.top;\n\t    }\n\t\n\t    return style;\n\t  },\n\t\n\t  /**\n\t   * Mix a Draggable instance into a child.\n\t   * @param  {Element} child    Child element.\n\t   * @param  {Object} position  Position object (pixel values)\n\t   * @return {Element}          Child wrapped in Draggable.\n\t   */\n\t  mixinDraggable: function mixinDraggable(child, position) {\n\t    var start = typeof position.left === \"string\" ? undefined : { x: position.left, y: position.top };\n\t    return React.createElement(\n\t      Draggable,\n\t      {\n\t        start: start,\n\t        moveOnStartChange: this.props.moveOnStartChange,\n\t        onStop: this.onDragHandler('onDragStop'),\n\t        onStart: this.onDragHandler('onDragStart'),\n\t        onDrag: this.onDragHandler('onDrag'),\n\t        handle: this.props.handle,\n\t        cancel: \".react-resizable-handle \" + this.props.cancel,\n\t        useCSSTransforms: this.props.useCSSTransforms\n\t      },\n\t      child\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Mix a Resizable instance into a child.\n\t   * @param  {Element} child    Child element.\n\t   * @param  {Object} position  Position object (pixel values)\n\t   * @return {Element}          Child wrapped in Resizable.\n\t   */\n\t  mixinResizable: function mixinResizable(child, position) {\n\t    var p = this.props;\n\t    // This is the max possible width - doesn't go to infinity because of the width of the window\n\t    var maxWidth = this.calcPosition(0, 0, p.cols - p.x, 0).width;\n\t\n\t    // Calculate min/max constraints using our min & maxes\n\t    var mins = this.calcPosition(0, 0, p.minW, p.minH);\n\t    var maxes = this.calcPosition(0, 0, p.maxW, p.maxH);\n\t    var minConstraints = [mins.width, mins.height];\n\t    var maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];\n\t    return React.createElement(\n\t      Resizable,\n\t      {\n\t        width: position.width,\n\t        height: position.height,\n\t        minConstraints: minConstraints,\n\t        maxConstraints: maxConstraints,\n\t        onResizeStop: this.onResizeHandler('onResizeStop'),\n\t        onResizeStart: this.onResizeHandler('onResizeStart'),\n\t        onResize: this.onResizeHandler('onResize')\n\t      },\n\t      child\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Wrapper around drag events to provide more useful data.\n\t   * All drag events call the function with the given handler name,\n\t   * with the signature (index, x, y).\n\t   *\n\t   * @param  {String} handlerName Handler name to wrap.\n\t   * @return {Function}           Handler function.\n\t   */\n\t  onDragHandler: function onDragHandler(handlerName) {\n\t    var me = this;\n\t    return function (e, _ref3) {\n\t      var element = _ref3.element;\n\t      var position = _ref3.position;\n\t\n\t      if (!me.props[handlerName]) return;\n\t      // Get new XY\n\t\n\t      var _me$calcXY = me.calcXY(position);\n\t\n\t      var x = _me$calcXY.x;\n\t      var y = _me$calcXY.y;\n\t\n\t      // Cap x at numCols\n\t      x = Math.min(x, me.props.cols - me.props.w);\n\t\n\t      me.props[handlerName](me.props.i, x, y, { e: e, element: element, position: position });\n\t    };\n\t  },\n\t\n\t  /**\n\t   * Wrapper around drag events to provide more useful data.\n\t   * All drag events call the function with the given handler name,\n\t   * with the signature (index, x, y).\n\t   *\n\t   * @param  {String} handlerName Handler name to wrap.\n\t   * @return {Function}           Handler function.\n\t   */\n\t  onResizeHandler: function onResizeHandler(handlerName) {\n\t    var me = this;\n\t    return function (e, _ref4) {\n\t      var element = _ref4.element;\n\t      var size = _ref4.size;\n\t\n\t      if (!me.props[handlerName]) return;\n\t\n\t      // Get new XY\n\t\n\t      var _me$calcWH = me.calcWH(size);\n\t\n\t      var w = _me$calcWH.w;\n\t      var h = _me$calcWH.h;\n\t\n\t      // Cap w at numCols\n\t      w = Math.min(w, me.props.cols - me.props.x);\n\t      // Ensure w is at least 1\n\t      w = Math.max(w, 1);\n\t\n\t      // Min/max capping\n\t      w = Math.max(Math.min(w, me.props.maxW), me.props.minW);\n\t      h = Math.max(Math.min(h, me.props.maxH), me.props.minH);\n\t\n\t      me.setState({ resizing: handlerName === 'onResizeStop' ? null : size });\n\t\n\t      me.props[handlerName](me.props.i, w, h, { e: e, element: element, size: size });\n\t    };\n\t  },\n\t\n\t  render: function render() {\n\t    var p = this.props,\n\t        pos = this.calcPosition(p.x, p.y, p.w, p.h);\n\t    if (this.state.resizing) {\n\t      pos.width = this.state.resizing.width;\n\t      pos.height = this.state.resizing.height;\n\t    }\n\t\n\t    // Create the child element. We clone the existing element but modify its className and style.\n\t    var child = cloneWithProps(this.props.children, {\n\t      // Munge a classname. Use passed in classnames and resizing.\n\t      // React with merge the classNames.\n\t      className: ['react-grid-item', this.props.className, this.state.resizing ? 'resizing' : '', this.props.useCSSTransforms ? 'cssTransforms' : ''].join(' '),\n\t      // We can set the width and height on the child, but unfortunately we can't set the position.\n\t      style: this.createStyle(pos)\n\t    });\n\t\n\t    // Resizable support. This is usually on but the user can toggle it off.\n\t    if (this.props.isResizable) {\n\t      child = this.mixinResizable(child, pos);\n\t    }\n\t\n\t    // Draggable support. This is always on, except for with placeholders.\n\t    if (this.props.isDraggable) {\n\t      child = this.mixinDraggable(child, pos);\n\t    }\n\t\n\t    return child;\n\t  }\n\t});\n\t\n\tfunction constraintError(name, props) {\n\t  delete props.children;\n\t  throw new Error(name + ' overrides contraints on gridItem ' + props.i + '. Full props: ' + JSON.stringify(props));\n\t}\n\t\n\tmodule.exports = GridItem;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\t\n\tvar React = __webpack_require__(1);\n\tvar utils = __webpack_require__(2);\n\tvar responsiveUtils = __webpack_require__(12);\n\tvar PureDeepRenderMixin = __webpack_require__(3);\n\tvar WidthListeningMixin = __webpack_require__(6);\n\tvar ReactGridLayout = __webpack_require__(5);\n\t\n\t/**\n\t * A wrapper around ReactGridLayout to support responsive breakpoints.\n\t */\n\tvar ResponsiveReactGridLayout = React.createClass({\n\t  displayName: 'ResponsiveReactGridLayout',\n\t\n\t  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\t\n\t  propTypes: {\n\t    //\n\t    // Basic props\n\t    //\n\t\n\t    // Optional, but if you are managing width yourself you may want to set the breakpoint\n\t    // yourself as well.\n\t    breakpoint: React.PropTypes.string,\n\t\n\t    // {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}\n\t    breakpoints: React.PropTypes.object,\n\t\n\t    // # of cols. This is a breakpoint -> cols map\n\t    cols: React.PropTypes.object,\n\t\n\t    // layouts is an object mapping breakpoints to layouts.\n\t    // e.g. {lg: Layout, md: Layout, ...}\n\t    layouts: function layouts(props, propName, componentName) {\n\t      React.PropTypes.object.isRequired.apply(this, arguments);\n\t\n\t      var layouts = props.layouts;\n\t      Object.keys(layouts).map(function (k) {\n\t        utils.validateLayout(layouts[k], 'layouts.' + k);\n\t      });\n\t    },\n\t\n\t    //\n\t    // Callbacks\n\t    //\n\t\n\t    // Calls back with breakpoint and new # cols\n\t    onBreakpointChange: React.PropTypes.func,\n\t\n\t    // Callback so you can save the layout.\n\t    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n\t    onLayoutChange: React.PropTypes.func\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      breakpoints: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 },\n\t      cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n\t      layouts: {},\n\t      onBreakpointChange: function onBreakpointChange() {},\n\t      onLayoutChange: function onLayoutChange() {}\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    var breakpoint = this.props.breakpoint || responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, this.props.initialWidth);\n\t    var cols = responsiveUtils.getColsFromBreakpoint(breakpoint, this.props.cols);\n\t\n\t    // Get the initial layout. This can tricky; we try to generate one however possible if one doesn't exist\n\t    // for this layout.\n\t    var initialLayout = responsiveUtils.findOrGenerateResponsiveLayout(this.props.layouts, this.props.breakpoints, breakpoint, breakpoint, cols, this.props.verticalCompact);\n\t\n\t    return {\n\t      layout: initialLayout,\n\t      // storage for layouts obsoleted by breakpoints\n\t      layouts: this.props.layouts || {},\n\t      breakpoint: breakpoint,\n\t      cols: cols,\n\t      width: this.props.initialWidth\n\t    };\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t    // This allows you to set the width manually if you like.\n\t    // Use manual width changes in combination with `listenToWindowResize: false`\n\t    if (nextProps.width) this.onWidthChange(nextProps.width);\n\t\n\t    // Allow parent to set breakpoint directly.\n\t    if (nextProps.breakpoint !== this.props.breakpoint) {\n\t      this.onWidthChange(this.state.width);\n\t    }\n\t\n\t    // Allow parent to set layouts directly.\n\t    if (nextProps.layouts && nextProps.layouts !== this.state.layouts) {\n\t      // Since we're setting an entirely new layout object, we must generate a new responsive layout\n\t      // if one does not exist.\n\t      var newLayout = responsiveUtils.findOrGenerateResponsiveLayout(nextProps.layouts, nextProps.breakpoints, this.state.breakpoint, this.state.breakpoint, this.state.cols, this.props.verticalLayout);\n\t\n\t      this.setState({\n\t        layouts: nextProps.layouts,\n\t        layout: newLayout\n\t      });\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Bubble this up, add `layouts` object.\n\t   * @param  {Array} layout Layout from inner Grid.\n\t   */\n\t  onLayoutChange: function onLayoutChange(layout) {\n\t    this.state.layouts[this.state.breakpoint] = layout;\n\t    this.setState({ layout: layout, layouts: this.state.layouts });\n\t    this.props.onLayoutChange(layout, this.state.layouts);\n\t  },\n\t\n\t  /**\n\t   * When the width changes work through breakpoints and reset state with the new width & breakpoint.\n\t   * Width changes are necessary to figure out the widget widths.\n\t   */\n\t  onWidthChange: function onWidthChange(width) {\n\t    // Set new breakpoint\n\t    var newState = { width: width };\n\t    newState.breakpoint = this.props.breakpoint || responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, newState.width);\n\t    newState.cols = responsiveUtils.getColsFromBreakpoint(newState.breakpoint, this.props.cols);\n\t\n\t    // Breakpoint change\n\t    if (newState.cols !== this.state.cols) {\n\t\n\t      // Store the current layout\n\t      newState.layouts = this.state.layouts;\n\t      newState.layouts[this.state.breakpoint] = JSON.parse(JSON.stringify(this.state.layout));\n\t\n\t      // Find or generate a new one.\n\t      newState.layout = responsiveUtils.findOrGenerateResponsiveLayout(newState.layouts, this.props.breakpoints, newState.breakpoint, this.state.breakpoint, newState.cols, this.props.verticalLayout);\n\t\n\t      // This adds missing items.\n\t      newState.layout = utils.synchronizeLayoutWithChildren(newState.layout, this.props.children, newState.cols, this.props.verticalCompact);\n\t\n\t      // Store this new layout as well.\n\t      newState.layouts[newState.breakpoint] = newState.layout;\n\t\n\t      this.props.onBreakpointChange(newState.breakpoint, newState.cols);\n\t    }\n\t\n\t    this.setState(newState);\n\t  },\n\t\n\t  render: function render() {\n\t    // Don't pass responsive props to RGL.\n\t    /*jshint unused:false*/\n\t    var _props = this.props;\n\t    var layouts = _props.layouts;\n\t    var onBreakpointChange = _props.onBreakpointChange;\n\t    var breakpoints = _props.breakpoints;\n\t\n\t    var props = _objectWithoutProperties(_props, ['layouts', 'onBreakpointChange', 'breakpoints']);\n\t\n\t    return React.createElement(\n\t      ReactGridLayout,\n\t      _extends({}, props, {\n\t        layout: this.state.layout,\n\t        cols: this.state.cols,\n\t        listenToWindowResize: false,\n\t        onLayoutChange: this.onLayoutChange,\n\t        width: this.state.width }),\n\t      this.props.children\n\t    );\n\t  }\n\t});\n\t\n\tmodule.exports = ResponsiveReactGridLayout;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(2);\n\t\n\tvar responsiveUtils = module.exports = {\n\t\n\t  /**\n\t   * Given a width, find the highest breakpoint that matches is valid for it (width > breakpoint).\n\t   *\n\t   * @param  {Object} breakpoints Breakpoints object (e.g. {lg: 1200, md: 960, ...})\n\t   * @param  {Number} width Screen width.\n\t   * @return {String}       Highest breakpoint that is less than width.\n\t   */\n\t  getBreakpointFromWidth: function getBreakpointFromWidth(breakpoints, width) {\n\t    var sorted = responsiveUtils.sortBreakpoints(breakpoints);\n\t    var matching = sorted[0];\n\t    for (var i = 1, len = sorted.length; i < len; i++) {\n\t      var breakpointName = sorted[i];\n\t      if (width > breakpoints[breakpointName]) matching = breakpointName;\n\t    }\n\t    return matching;\n\t  },\n\t\n\t  /**\n\t   * Given a breakpoint, get the # of cols set for it.\n\t   * @param  {String} breakpoint Breakpoint name.\n\t   * @param  {Object} cols       Map of breakpoints to cols.\n\t   * @return {Number}            Number of cols.\n\t   */\n\t  getColsFromBreakpoint: function getColsFromBreakpoint(breakpoint, cols) {\n\t    if (!cols[breakpoint]) {\n\t      throw new Error(\"ResponsiveReactGridLayout: `cols` entry for breakpoint \" + breakpoint + \" is missing!\");\n\t    }\n\t    return cols[breakpoint];\n\t  },\n\t\n\t  /**\n\t   * Given existing layouts and a new breakpoint, find or generate a new layout.\n\t   *\n\t   * This finds the layout above the new one and generates from it, if it exists.\n\t   *\n\t   * @param  {Array} layouts     Existing layouts.\n\t   * @param  {Array} breakpoints All breakpoints.\n\t   * @param  {String} breakpoint New breakpoint.\n\t   * @param  {String} breakpoint Last breakpoint (for fallback).\n\t   * @param  {Number} cols       Column count at new breakpoint.\n\t   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n\t   *   vertically.\n\t   * @return {Array}             New layout.\n\t   */\n\t  findOrGenerateResponsiveLayout: function findOrGenerateResponsiveLayout(layouts, breakpoints, breakpoint, lastBreakpoint, cols, verticalCompact) {\n\t    // If it already exists, just return it.\n\t    if (layouts[breakpoint]) return layouts[breakpoint];\n\t    // Find or generate the next layout\n\t    var layout = layouts[lastBreakpoint];\n\t    var breakpointsSorted = responsiveUtils.sortBreakpoints(breakpoints);\n\t    var breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));\n\t    for (var i = 0, len = breakpointsAbove.length; i < len; i++) {\n\t      var b = breakpointsAbove[i];\n\t      if (layouts[b]) {\n\t        layout = layouts[b];\n\t        break;\n\t      }\n\t    }\n\t    layout = JSON.parse(JSON.stringify(layout || [])); // clone layout so we don't modify existing items\n\t    return utils.compact(utils.correctBounds(layout, { cols: cols }), verticalCompact);\n\t  },\n\t\n\t  /**\n\t   * Given breakpoints, return an array of breakpoints sorted by width. This is usually\n\t   * e.g. ['xxs', 'xs', 'sm', ...]\n\t   *\n\t   * @param  {Object} breakpoints Key/value pair of breakpoint names to widths.\n\t   * @return {Array}              Sorted breakpoints.\n\t   */\n\t  sortBreakpoints: function sortBreakpoints(breakpoints) {\n\t    var keys = Object.keys(breakpoints);\n\t    return keys.sort(function (a, b) {\n\t      return breakpoints[a] - breakpoints[b];\n\t    });\n\t  }\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar pSlice = Array.prototype.slice;\n\tvar objectKeys = __webpack_require__(15);\n\tvar isArguments = __webpack_require__(14);\n\t\n\tvar deepEqual = module.exports = function (actual, expected, opts) {\n\t  if (!opts) opts = {};\n\t  // 7.1. All identical values are equivalent, as determined by ===.\n\t  if (actual === expected) {\n\t    return true;\n\t\n\t  } else if (actual instanceof Date && expected instanceof Date) {\n\t    return actual.getTime() === expected.getTime();\n\t\n\t  // 7.3. Other pairs that do not both pass typeof value == 'object',\n\t  // equivalence is determined by ==.\n\t  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n\t    return opts.strict ? actual === expected : actual == expected;\n\t\n\t  // 7.4. For all other Object pairs, including Array objects, equivalence is\n\t  // determined by having the same number of owned properties (as verified\n\t  // with Object.prototype.hasOwnProperty.call), the same set of keys\n\t  // (although not necessarily the same order), equivalent values for every\n\t  // corresponding key, and an identical 'prototype' property. Note: this\n\t  // accounts for both named and indexed properties on Arrays.\n\t  } else {\n\t    return objEquiv(actual, expected, opts);\n\t  }\n\t}\n\t\n\tfunction isUndefinedOrNull(value) {\n\t  return value === null || value === undefined;\n\t}\n\t\n\tfunction isBuffer (x) {\n\t  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n\t  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n\t    return false;\n\t  }\n\t  if (x.length > 0 && typeof x[0] !== 'number') return false;\n\t  return true;\n\t}\n\t\n\tfunction objEquiv(a, b, opts) {\n\t  var i, key;\n\t  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n\t    return false;\n\t  // an identical 'prototype' property.\n\t  if (a.prototype !== b.prototype) return false;\n\t  //~~~I've managed to break Object.keys through screwy arguments passing.\n\t  //   Converting to array solves the problem.\n\t  if (isArguments(a)) {\n\t    if (!isArguments(b)) {\n\t      return false;\n\t    }\n\t    a = pSlice.call(a);\n\t    b = pSlice.call(b);\n\t    return deepEqual(a, b, opts);\n\t  }\n\t  if (isBuffer(a)) {\n\t    if (!isBuffer(b)) {\n\t      return false;\n\t    }\n\t    if (a.length !== b.length) return false;\n\t    for (i = 0; i < a.length; i++) {\n\t      if (a[i] !== b[i]) return false;\n\t    }\n\t    return true;\n\t  }\n\t  try {\n\t    var ka = objectKeys(a),\n\t        kb = objectKeys(b);\n\t  } catch (e) {//happens when one is a string literal and the other isn't\n\t    return false;\n\t  }\n\t  // having the same number of owned properties (keys incorporates\n\t  // hasOwnProperty)\n\t  if (ka.length != kb.length)\n\t    return false;\n\t  //the same set of keys (although not necessarily the same order),\n\t  ka.sort();\n\t  kb.sort();\n\t  //~~~cheap key test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    if (ka[i] != kb[i])\n\t      return false;\n\t  }\n\t  //equivalent values for every corresponding key, and\n\t  //~~~possibly expensive deep test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    key = ka[i];\n\t    if (!deepEqual(a[key], b[key], opts)) return false;\n\t  }\n\t  return typeof a === typeof b;\n\t}\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\tvar supportsArgumentsClass = (function(){\n\t  return Object.prototype.toString.call(arguments)\n\t})() == '[object Arguments]';\n\t\n\texports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\t\n\texports.supported = supported;\n\tfunction supported(object) {\n\t  return Object.prototype.toString.call(object) == '[object Arguments]';\n\t};\n\t\n\texports.unsupported = unsupported;\n\tfunction unsupported(object){\n\t  return object &&\n\t    typeof object == 'object' &&\n\t    typeof object.length == 'number' &&\n\t    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n\t    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n\t    false;\n\t};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\texports = module.exports = typeof Object.keys === 'function'\n\t  ? Object.keys : shim;\n\t\n\texports.shim = shim;\n\tfunction shim (obj) {\n\t  var keys = [];\n\t  for (var key in obj) keys.push(key);\n\t  return keys;\n\t}\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar React = __webpack_require__(1);\n\tvar emptyFunction = function(){};\n\tvar assign = __webpack_require__(19);\n\tvar classNames = __webpack_require__(18);\n\tvar browserPrefix = __webpack_require__(17)();\n\t\n\t//\n\t// Helpers. See Element definition below this section.\n\t//\n\t\n\tfunction createUIEvent(draggable) {\n\t  // State changes are often (but not always!) async. We want the latest value.\n\t  var state = draggable._pendingState || draggable.state;\n\t  return {\n\t    node: draggable.getDOMNode(),\n\t    position: {\n\t      top: state.clientY,\n\t      left: state.clientX\n\t    }\n\t  };\n\t}\n\t\n\tfunction canDragX(draggable) {\n\t  return draggable.props.axis === 'both' || draggable.props.axis === 'x';\n\t}\n\t\n\tfunction canDragY(draggable) {\n\t  return draggable.props.axis === 'both' || draggable.props.axis === 'y';\n\t}\n\t\n\tfunction isFunction(func) {\n\t  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n\t}\n\t\n\t// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\n\tfunction findInArray(array, callback) {\n\t  for (var i = 0, length = array.length; i < length; i++) {\n\t    if (callback.apply(callback, [array[i], i, array])) return array[i];\n\t  }\n\t}\n\t\n\tvar matchesSelectorFunc = '';\n\tfunction matchesSelector(el, selector) {\n\t  if (!matchesSelectorFunc) {\n\t    matchesSelectorFunc = findInArray([\n\t      'matches',\n\t      'webkitMatchesSelector',\n\t      'mozMatchesSelector',\n\t      'msMatchesSelector',\n\t      'oMatchesSelector'\n\t    ], function(method){\n\t      return isFunction(el[method]);\n\t    });\n\t  }\n\t\n\t  return el[matchesSelectorFunc].call(el, selector);\n\t}\n\t\n\t/**\n\t * simple abstraction for dragging events names\n\t * */\n\tvar eventsFor = {\n\t  touch: {\n\t    start: 'touchstart',\n\t    move: 'touchmove',\n\t    end: 'touchend'\n\t  },\n\t  mouse: {\n\t    start: 'mousedown',\n\t    move: 'mousemove',\n\t    end: 'mouseup'\n\t  }\n\t};\n\t\n\t// Default to mouse events\n\tvar dragEventFor = eventsFor.mouse;\n\t\n\t/**\n\t * get {clientX, clientY} positions of control\n\t * */\n\tfunction getControlPosition(e) {\n\t  var position = (e.targetTouches && e.targetTouches[0]) || e;\n\t  return {\n\t    clientX: position.clientX,\n\t    clientY: position.clientY\n\t  };\n\t}\n\t\n\tfunction addEvent(el, event, handler) {\n\t  if (!el) { return; }\n\t  if (el.attachEvent) {\n\t    el.attachEvent('on' + event, handler);\n\t  } else if (el.addEventListener) {\n\t    el.addEventListener(event, handler, true);\n\t  } else {\n\t    el['on' + event] = handler;\n\t  }\n\t}\n\t\n\tfunction removeEvent(el, event, handler) {\n\t  if (!el) { return; }\n\t  if (el.detachEvent) {\n\t    el.detachEvent('on' + event, handler);\n\t  } else if (el.removeEventListener) {\n\t    el.removeEventListener(event, handler, true);\n\t  } else {\n\t    el['on' + event] = null;\n\t  }\n\t}\n\t\n\tfunction outerHeight(node) {\n\t  // This is deliberately excluding margin for our calculations, since we are using\n\t  // offsetTop which is including margin. See getBoundPosition\n\t  var height = node.clientHeight;\n\t  var computedStyle = window.getComputedStyle(node);\n\t  height += int(computedStyle.borderTopWidth);\n\t  height += int(computedStyle.borderBottomWidth);\n\t  return height;\n\t}\n\t\n\tfunction outerWidth(node) {\n\t  // This is deliberately excluding margin for our calculations, since we are using\n\t  // offsetLeft which is including margin. See getBoundPosition\n\t  var width = node.clientWidth;\n\t  var computedStyle = window.getComputedStyle(node);\n\t  width += int(computedStyle.borderLeftWidth);\n\t  width += int(computedStyle.borderRightWidth);\n\t  return width;\n\t}\n\tfunction innerHeight(node) {\n\t  var height = node.clientHeight;\n\t  var computedStyle = window.getComputedStyle(node);\n\t  height -= int(computedStyle.paddingTop);\n\t  height -= int(computedStyle.paddingBottom);\n\t  return height;\n\t}\n\t\n\tfunction innerWidth(node) {\n\t  var width = node.clientWidth;\n\t  var computedStyle = window.getComputedStyle(node);\n\t  width -= int(computedStyle.paddingLeft);\n\t  width -= int(computedStyle.paddingRight);\n\t  return width;\n\t}\n\t\n\tfunction isNum(num) {\n\t  return typeof num === 'number' && !isNaN(num);\n\t}\n\t\n\tfunction int(a) {\n\t  return parseInt(a, 10);\n\t}\n\t\n\tfunction getBoundPosition(draggable, clientX, clientY) {\n\t  var bounds = JSON.parse(JSON.stringify(draggable.props.bounds));\n\t  var node = draggable.getDOMNode();\n\t  var parent = node.parentNode;\n\t\n\t  if (bounds === 'parent') {\n\t    var nodeStyle = window.getComputedStyle(node);\n\t    var parentStyle = window.getComputedStyle(parent);\n\t    // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.\n\t    bounds = {\n\t      left: -node.offsetLeft + int(parentStyle.paddingLeft) +\n\t            int(nodeStyle.borderLeftWidth) + int(nodeStyle.marginLeft),\n\t      top: -node.offsetTop + int(parentStyle.paddingTop) +\n\t            int(nodeStyle.borderTopWidth) + int(nodeStyle.marginTop),\n\t      right: innerWidth(parent) - outerWidth(node) - node.offsetLeft,\n\t      bottom: innerHeight(parent) - outerHeight(node) - node.offsetTop\n\t    };\n\t  }\n\t\n\t  // Keep x and y below right and bottom limits...\n\t  if (isNum(bounds.right)) clientX = Math.min(clientX, bounds.right);\n\t  if (isNum(bounds.bottom)) clientY = Math.min(clientY, bounds.bottom);\n\t\n\t  // But above left and top limits.\n\t  if (isNum(bounds.left)) clientX = Math.max(clientX, bounds.left);\n\t  if (isNum(bounds.top)) clientY = Math.max(clientY, bounds.top);\n\t\n\t  return [clientX, clientY];\n\t}\n\t\n\tfunction snapToGrid(grid, pendingX, pendingY) {\n\t  var x = Math.round(pendingX / grid[0]) * grid[0];\n\t  var y = Math.round(pendingY / grid[1]) * grid[1];\n\t  return [x, y];\n\t}\n\t\n\t// Useful for preventing blue highlights all over everything when dragging.\n\tvar userSelectStyle = ';user-select: none;';\n\tif (browserPrefix) {\n\t  userSelectStyle += '-' + browserPrefix.toLowerCase() + '-user-select: none;';\n\t}\n\t\n\tfunction addUserSelectStyles(draggable) {\n\t  if (!draggable.props.enableUserSelectHack) return;\n\t  var style = document.body.getAttribute('style') || '';\n\t  document.body.setAttribute('style', style + userSelectStyle);\n\t}\n\t\n\tfunction removeUserSelectStyles(draggable) {\n\t  if (!draggable.props.enableUserSelectHack) return;\n\t  var style = document.body.getAttribute('style') || '';\n\t  document.body.setAttribute('style', style.replace(userSelectStyle, ''));\n\t}\n\t\n\tfunction createCSSTransform(style) {\n\t  // Replace unitless items with px\n\t  var x = style.x + 'px';\n\t  var y = style.y + 'px';\n\t  var out = {transform: 'translate(' + x + ',' + y + ')'};\n\t  // Add single prefixed property as well\n\t  if (browserPrefix) {\n\t    out[browserPrefix + 'Transform'] = out.transform;\n\t  }\n\t  return out;\n\t}\n\t\n\tfunction createSVGTransform(args) {\n\t  return 'translate(' + args.x + ',' + args.y + ')';\n\t}\n\t\n\t//\n\t// End Helpers.\n\t//\n\t\n\t//\n\t// Define <Draggable>\n\t//\n\t\n\tmodule.exports = React.createClass({\n\t  displayName: 'Draggable',\n\t\n\t  propTypes: {\n\t    /**\n\t     * `axis` determines which axis the draggable can move.\n\t     *\n\t     * 'both' allows movement horizontally and vertically.\n\t     * 'x' limits movement to horizontal axis.\n\t     * 'y' limits movement to vertical axis.\n\t     *\n\t     * Defaults to 'both'.\n\t     */\n\t    axis: React.PropTypes.oneOf(['both', 'x', 'y']),\n\t\n\t    /**\n\t     * `bounds` determines the range of movement available to the element.\n\t     * Available values are:\n\t     *\n\t     * 'parent' restricts movement within the Draggable's parent node.\n\t     *\n\t     * Alternatively, pass an object with the following properties, all of which are optional:\n\t     *\n\t     * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}\n\t     *\n\t     * All values are in px.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *   var App = React.createClass({\n\t     *       render: function () {\n\t     *         return (\n\t     *            <Draggable bounds={{right: 300, bottom: 300}}>\n\t     *              <div>Content</div>\n\t     *           </Draggable>\n\t     *         );\n\t     *       }\n\t     *   });\n\t     * ```\n\t     */\n\t    bounds: React.PropTypes.oneOfType([\n\t      React.PropTypes.shape({\n\t        left: React.PropTypes.Number,\n\t        right: React.PropTypes.Number,\n\t        top: React.PropTypes.Number,\n\t        bottom: React.PropTypes.Number\n\t      }),\n\t      React.PropTypes.oneOf(['parent', false])\n\t    ]),\n\t\n\t    /**\n\t     * By default, we add 'user-select:none' attributes to the document body\n\t     * to prevent ugly text selection during drag. If this is causing problems\n\t     * for your app, set this to `false`.\n\t     */\n\t    enableUserSelectHack: React.PropTypes.bool,\n\t\n\t    /**\n\t     * `handle` specifies a selector to be used as the handle that initiates drag.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *   var App = React.createClass({\n\t     *       render: function () {\n\t     *         return (\n\t     *            <Draggable handle=\".handle\">\n\t     *              <div>\n\t     *                  <div className=\"handle\">Click me to drag</div>\n\t     *                  <div>This is some other content</div>\n\t     *              </div>\n\t     *           </Draggable>\n\t     *         );\n\t     *       }\n\t     *   });\n\t     * ```\n\t     */\n\t    handle: React.PropTypes.string,\n\t\n\t    /**\n\t     * `cancel` specifies a selector to be used to prevent drag initialization.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *   var App = React.createClass({\n\t     *       render: function () {\n\t     *           return(\n\t     *               <Draggable cancel=\".cancel\">\n\t     *                   <div>\n\t     *                     <div className=\"cancel\">You can't drag from here</div>\n\t     *            <div>Dragging here works fine</div>\n\t     *                   </div>\n\t     *               </Draggable>\n\t     *           );\n\t     *       }\n\t     *   });\n\t     * ```\n\t     */\n\t    cancel: React.PropTypes.string,\n\t\n\t    /**\n\t     * `grid` specifies the x and y that dragging should snap to.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *   var App = React.createClass({\n\t     *       render: function () {\n\t     *           return (\n\t     *               <Draggable grid={[25, 25]}>\n\t     *                   <div>I snap to a 25 x 25 grid</div>\n\t     *               </Draggable>\n\t     *           );\n\t     *       }\n\t     *   });\n\t     * ```\n\t     */\n\t    grid: React.PropTypes.arrayOf(React.PropTypes.number),\n\t\n\t    /**\n\t     * `start` specifies the x and y that the dragged item should start at\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *      var App = React.createClass({\n\t     *          render: function () {\n\t     *              return (\n\t     *                  <Draggable start={{x: 25, y: 25}}>\n\t     *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n\t     *                  </Draggable>\n\t     *              );\n\t     *          }\n\t     *      });\n\t     * ```\n\t     */\n\t    start: React.PropTypes.shape({\n\t      x: React.PropTypes.number,\n\t      y: React.PropTypes.number\n\t    }),\n\t\n\t    /**\n\t     * `moveOnStartChange`, if true (default false) will move the element if the `start`\n\t     * property changes.\n\t     */\n\t    moveOnStartChange: React.PropTypes.bool,\n\t\n\t\n\t    /**\n\t     * `zIndex` specifies the zIndex to use while dragging.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```jsx\n\t     *   var App = React.createClass({\n\t     *       render: function () {\n\t     *           return (\n\t     *               <Draggable zIndex={100}>\n\t     *                   <div>I have a zIndex</div>\n\t     *               </Draggable>\n\t     *           );\n\t     *       }\n\t     *   });\n\t     * ```\n\t     */\n\t    zIndex: React.PropTypes.number,\n\t\n\t    /**\n\t     * Called when dragging starts.\n\t     * If this function returns the boolean false, dragging will be canceled.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```js\n\t     *  function (event, ui) {}\n\t     * ```\n\t     *\n\t     * `event` is the Event that was triggered.\n\t     * `ui` is an object:\n\t     *\n\t     * ```js\n\t     *  {\n\t     *    position: {top: 0, left: 0}\n\t     *  }\n\t     * ```\n\t     */\n\t    onStart: React.PropTypes.func,\n\t\n\t    /**\n\t     * Called while dragging.\n\t     * If this function returns the boolean false, dragging will be canceled.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```js\n\t     *  function (event, ui) {}\n\t     * ```\n\t     *\n\t     * `event` is the Event that was triggered.\n\t     * `ui` is an object:\n\t     *\n\t     * ```js\n\t     *  {\n\t     *    position: {top: 0, left: 0}\n\t     *  }\n\t     * ```\n\t     */\n\t    onDrag: React.PropTypes.func,\n\t\n\t    /**\n\t     * Called when dragging stops.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```js\n\t     *  function (event, ui) {}\n\t     * ```\n\t     *\n\t     * `event` is the Event that was triggered.\n\t     * `ui` is an object:\n\t     *\n\t     * ```js\n\t     *  {\n\t     *    position: {top: 0, left: 0}\n\t     *  }\n\t     * ```\n\t     */\n\t    onStop: React.PropTypes.func,\n\t\n\t    /**\n\t     * A workaround option which can be passed if onMouseDown needs to be accessed,\n\t     * since it'll always be blocked (due to that there's internal use of onMouseDown)\n\t     */\n\t    onMouseDown: React.PropTypes.func,\n\t  },\n\t\n\t  componentWillReceiveProps: function(newProps) {\n\t    // React to changes in the 'start' param.\n\t    if (newProps.moveOnStartChange && newProps.start) {\n\t      this.setState(this.getInitialState(newProps));\n\t    }\n\t  },\n\t\n\t  componentDidMount: function() {\n\t    // Check to see if the element passed is an instanceof SVGElement\n\t    if( React.findDOMNode(this) instanceof SVGElement) {\n\t        this.setState({ isElementSVG: true });\n\t    }\n\t  },\n\t\n\t  componentWillUnmount: function() {\n\t    // Remove any leftover event handlers\n\t    removeEvent(document, dragEventFor.move, this.handleDrag);\n\t    removeEvent(document, dragEventFor.end, this.handleDragEnd);\n\t    removeUserSelectStyles(this);\n\t  },\n\t\n\t  getDefaultProps: function () {\n\t    return {\n\t      axis: 'both',\n\t      bounds: false,\n\t      handle: null,\n\t      cancel: null,\n\t      grid: null,\n\t      moveOnStartChange: false,\n\t      start: {x: 0, y: 0},\n\t      zIndex: NaN,\n\t      enableUserSelectHack: true,\n\t      onStart: emptyFunction,\n\t      onDrag: emptyFunction,\n\t      onStop: emptyFunction,\n\t      onMouseDown: emptyFunction\n\t    };\n\t  },\n\t\n\t  getInitialState: function (props) {\n\t    // Handle call from CWRP\n\t    var currentState = this.state;\n\t    props = props || this.props;\n\t    return {\n\t      // Whether or not we are currently dragging.\n\t      dragging: false,\n\t\n\t      // Offset between start top/left and mouse top/left while dragging.\n\t      offsetX: 0, offsetY: 0,\n\t\n\t      // Current transform x and y.\n\t      clientX: props.start.x, clientY: props.start.y,\n\t\n\t      // Determines if the element is an svg or not. Default to false.\n\t      isElementSVG: currentState && currentState.isElementSVG !== undefined ?\n\t        currentState.isElementSVG :\n\t        false\n\t    };\n\t  },\n\t\n\t  handleDragStart: function (e) {\n\t    // Set touch identifier in component state if this is a touch event\n\t    if(e.targetTouches){\n\t      this.setState({touchIdentifier: e.targetTouches[0].identifier});\n\t    }\n\t\n\t    // Make it possible to attach event handlers on top of this one\n\t    this.props.onMouseDown(e);\n\t\n\t    // Short circuit if handle or cancel prop was provided and selector doesn't match\n\t    if ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||\n\t      (this.props.cancel && matchesSelector(e.target, this.props.cancel))) {\n\t      return;\n\t    }\n\t\n\t    // Call event handler. If it returns explicit false, cancel.\n\t    var shouldStart = this.props.onStart(e, createUIEvent(this));\n\t    if (shouldStart === false) return;\n\t\n\t    var dragPoint = getControlPosition(e);\n\t\n\t    // Add a style to the body to disable user-select. This prevents text from\n\t    // being selected all over the page.\n\t    addUserSelectStyles(this);\n\t\n\t    // Initiate dragging. Set the current x and y as offsets\n\t    // so we know how much we've moved during the drag. This allows us\n\t    // to drag elements around even if they have been moved, without issue.\n\t    this.setState({\n\t      dragging: true,\n\t      offsetX: dragPoint.clientX - this.state.clientX,\n\t      offsetY: dragPoint.clientY - this.state.clientY,\n\t      scrollX: document.body.scrollLeft,\n\t      scrollY: document.body.scrollTop\n\t    });\n\t\n\t\n\t    // Add event handlers\n\t    addEvent(document, 'scroll', this.handleScroll);\n\t    addEvent(document, dragEventFor.move, this.handleDrag);\n\t    addEvent(document, dragEventFor.end, this.handleDragEnd);\n\t  },\n\t\n\t  handleDragEnd: function (e) {\n\t    // Short circuit if not currently dragging\n\t    if (!this.state.dragging) {\n\t      return;\n\t    }\n\t\n\t    // Short circuit if this is not the correct touch event\n\t    if(e.changedTouches && (e.changedTouches[0].identifier != this.state.touchIdentifier)){\n\t     return;\n\t    }\n\t\n\t    removeUserSelectStyles(this);\n\t\n\t    // Turn off dragging\n\t    this.setState({\n\t      dragging: false\n\t    });\n\t\n\t    // Call event handler\n\t    this.props.onStop(e, createUIEvent(this));\n\t\n\t    // Remove event handlers\n\t    removeEvent(document, 'scroll', this.handleScroll);\n\t    removeEvent(document, dragEventFor.move, this.handleDrag);\n\t    removeEvent(document, dragEventFor.end, this.handleDragEnd);\n\t  },\n\t\n\t  handleDrag: function (e) {\n\t    // Return if this is a touch event, but not the correct one for this element\n\t    if(e.targetTouches && (e.targetTouches[0].identifier != this.state.touchIdentifier)){\n\t      return;\n\t    }\n\t    var dragPoint = getControlPosition(e);\n\t\n\t    // Calculate X and Y\n\t    var clientX = dragPoint.clientX - this.state.offsetX;\n\t    var clientY = dragPoint.clientY - this.state.offsetY;\n\t\n\t    // Snap to grid if prop has been provided\n\t    if (Array.isArray(this.props.grid)) {\n\t      var coords = snapToGrid(this.props.grid, clientX, clientY);\n\t      clientX = coords[0];\n\t      clientY = coords[1];\n\t    }\n\t\n\t    if (this.props.bounds) {\n\t      var pos = getBoundPosition(this, clientX, clientY);\n\t      clientX = pos[0];\n\t      clientY = pos[1];\n\t    }\n\t\n\t    // Call event handler. If it returns explicit false, cancel.\n\t    var shouldUpdate = this.props.onDrag(e, createUIEvent(this));\n\t    if (shouldUpdate === false) return this.handleDragEnd({});\n\t\n\t    // Update transform\n\t    this.setState({\n\t      clientX: clientX,\n\t      clientY: clientY\n\t    });\n\t  },\n\t\n\t  handleScroll: function(e) {\n\t    var s = this.state, x = document.body.scrollLeft, y = document.body.scrollTop;\n\t    var offsetX = x - s.scrollX, offsetY = y - s.scrollY;\n\t    this.setState({\n\t      scrollX: x,\n\t      scrollY: y,\n\t      clientX: s.clientX + offsetX,\n\t      clientY: s.clientY + offsetY,\n\t      offsetX: s.offsetX - offsetX,\n\t      offsetY: s.offsetY - offsetY\n\t    });\n\t  },\n\t\n\t  onMouseDown: function(ev) {\n\t    // Prevent 'ghost click' which happens 300ms after touchstart if the event isn't cancelled.\n\t    // We don't cancel the event on touchstart because of #37; we might want to make a scrollable item draggable.\n\t    // More on ghost clicks: http://ariatemplates.com/blog/2014/05/ghost-clicks-in-mobile-browsers/\n\t    if (dragEventFor === eventsFor.touch) {\n\t      return ev.preventDefault();\n\t    }\n\t\n\t    return this.handleDragStart.apply(this, arguments);\n\t  },\n\t\n\t  onTouchStart: function(ev) {\n\t    // We're on a touch device now, so change the event handlers\n\t    dragEventFor = eventsFor.touch;\n\t\n\t    return this.handleDragStart.apply(this, arguments);\n\t  },\n\t\n\t  // Intended for use by a parent component. Resets internal state on this component. Useful for\n\t  // <Resizable> and other components in case this element is manually resized and start/moveOnStartChange\n\t  // don't work for you.\n\t  resetState: function() {\n\t    this.setState({\n\t      offsetX: 0, offsetY: 0, clientX: 0, clientY: 0\n\t    });\n\t  },\n\t\n\t  render: function () {\n\t    // Create style object. We extend from existing styles so we don't\n\t    // remove anything already set (like background, color, etc).\n\t    var childStyle = this.props.children.props.style || {};\n\t\n\t    // Add a CSS transform to move the element around. This allows us to move the element around\n\t    // without worrying about whether or not it is relatively or absolutely positioned.\n\t    // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>\n\t    // has a clean slate.\n\t    var transform = this.state.isElementSVG ? null :\n\t      createCSSTransform({\n\t          // Set left if horizontal drag is enabled\n\t          x: canDragX(this) ?\n\t            this.state.clientX :\n\t            this.props.start.x,\n\t\n\t          // Set top if vertical drag is enabled\n\t          y: canDragY(this) ?\n\t            this.state.clientY :\n\t            this.props.start.y\n\t        });\n\t\n\t\n\t    // This is primarily for IE as it ignores the CSS transform applied above\n\t    // and only respects the real transform attribute.\n\t    var svgTransform = !this.state.isElementSVG ? null :\n\t        createSVGTransform({\n\t          // Set left if horizontal drag is enabled\n\t          x: canDragX(this) ?\n\t            this.state.clientX :\n\t            this.props.start.x,\n\t\n\t          // Set top if vertical drag is enabled\n\t          y: canDragY(this) ?\n\t            this.state.clientY :\n\t            this.props.start.y\n\t        });\n\t\n\t\n\t    // Workaround IE pointer events; see #51\n\t    // https://github.com/mzabriskie/react-draggable/issues/51#issuecomment-103488278\n\t    var touchHacks = {\n\t      touchAction: 'none'\n\t    };\n\t\n\t    var style = assign({}, childStyle, transform, touchHacks);\n\t\n\t    // Set zIndex if currently dragging and prop has been provided\n\t    if (this.state.dragging && !isNaN(this.props.zIndex)) {\n\t      style.zIndex = this.props.zIndex;\n\t    }\n\t\n\t    var className = classNames((this.props.children.props.className || ''), 'react-draggable', {\n\t      'react-draggable-dragging': this.state.dragging,\n\t      'react-draggable-dragged': this.state.dragged\n\t    });\n\t\n\t    // Reuse the child provided\n\t    // This makes it flexible to use whatever element is wanted (div, ul, etc)\n\t    return React.cloneElement(React.Children.only(this.props.children), {\n\t      style: style,\n\t      transform: svgTransform,\n\t      className: className,\n\t\n\t      onMouseDown: this.onMouseDown,\n\t      onTouchStart: this.onTouchStart,\n\t      onMouseUp: this.handleDragEnd,\n\t      onTouchEnd: this.handleDragEnd\n\t    });\n\t  }\n\t});\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function() {\n\t  if (typeof window === 'undefined') return '';\n\t  // Thanks David Walsh\n\t  var styles = window.getComputedStyle(document.documentElement, ''),\n\t  pre = (Array.prototype.slice\n\t        .call(styles)\n\t        .join('')\n\t        .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])\n\t      )[1];\n\t  // 'ms' is not titlecased\n\t  if(pre === undefined || pre === null) return '';\n\t  if (pre === 'ms') return pre;\n\t  return pre.slice(0, 1).toUpperCase() + pre.slice(1);\n\t};\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t  Copyright (c) 2015 Jed Watson.\n\t  Licensed under the MIT License (MIT), see\n\t  http://jedwatson.github.io/classnames\n\t*/\n\t/* global define */\n\t\n\t(function () {\n\t\t'use strict';\n\t\n\t\tvar hasOwn = {}.hasOwnProperty;\n\t\n\t\tfunction classNames () {\n\t\t\tvar classes = '';\n\t\n\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\tvar arg = arguments[i];\n\t\t\t\tif (!arg) continue;\n\t\n\t\t\t\tvar argType = typeof arg;\n\t\n\t\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\t\tclasses += ' ' + arg;\n\t\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\t\tclasses += ' ' + classNames.apply(null, arg);\n\t\t\t\t} else if (argType === 'object') {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses += ' ' + key;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn classes.substr(1);\n\t\t}\n\t\n\t\tif (typeof module !== 'undefined' && module.exports) {\n\t\t\tmodule.exports = classNames;\n\t\t} else if (true) {\n\t\t\t// register as 'classnames', consistent with npm package name\n\t\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t\t\t\treturn classNames;\n\t\t\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\t} else {\n\t\t\twindow.classNames = classNames;\n\t\t}\n\t}());\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t/* eslint-disable no-unused-vars */\n\t'use strict';\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\tvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\t\n\tfunction toObject(val) {\n\t\tif (val === null || val === undefined) {\n\t\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t\t}\n\t\n\t\treturn Object(val);\n\t}\n\t\n\tmodule.exports = Object.assign || function (target, source) {\n\t\tvar from;\n\t\tvar to = toObject(target);\n\t\tvar symbols;\n\t\n\t\tfor (var s = 1; s < arguments.length; s++) {\n\t\t\tfrom = Object(arguments[s]);\n\t\n\t\t\tfor (var key in from) {\n\t\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\t\tto[key] = from[key];\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (Object.getOwnPropertySymbols) {\n\t\t\t\tsymbols = Object.getOwnPropertySymbols(from);\n\t\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn to;\n\t};\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };\n\t\n\tvar _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } };\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar React = __webpack_require__(1);\n\tvar Resizable = __webpack_require__(8);\n\tvar PureRenderMixin = __webpack_require__(9);\n\t\n\t// An example use of Resizable.\n\tvar ResizableBox = module.exports = React.createClass({\n\t  displayName: 'ResizableBox',\n\t  mixins: [PureRenderMixin],\n\t\n\t  propTypes: {\n\t    lockAspectRatio: React.PropTypes.bool\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      lockAspectRatio: false,\n\t      handleSize: [20, 20]\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      width: this.props.width,\n\t      height: this.props.height,\n\t      aspectRatio: this.props.width / this.props.height\n\t    };\n\t  },\n\t\n\t  onResize: function onResize(event, _ref) {\n\t    var _this = this;\n\t\n\t    var element = _ref.element;\n\t    var size = _ref.size;\n\t    var width = size.width;\n\t    var height = size.height;\n\t\n\t    var widthChanged = width !== this.state.width,\n\t        heightChanged = height !== this.state.height;\n\t    if (!widthChanged && !heightChanged) {\n\t      return;\n\t    }if (this.props.lockAspectRatio) {\n\t      var _preserveAspectRatio = this.preserveAspectRatio(width, height);\n\t\n\t      var _preserveAspectRatio2 = _slicedToArray(_preserveAspectRatio, 2);\n\t\n\t      width = _preserveAspectRatio2[0];\n\t      height = _preserveAspectRatio2[1];\n\t    }\n\t\n\t    this.setState({ width: width, height: height }, function () {\n\t      if (_this.props.onResize) {\n\t        _this.props.onResize(event, { element: element, size: { width: width, height: height } });\n\t      }\n\t    });\n\t  },\n\t\n\t  // If you do this, be careful of constraints\n\t  preserveAspectRatio: function preserveAspectRatio(width, height) {\n\t    var min = this.props.minConstraints;\n\t    var max = this.props.maxConstraints;\n\t\n\t    height = width / this.state.aspectRatio;\n\t    width = height * this.state.aspectRatio;\n\t\n\t    if (min) {\n\t      width = Math.max(min[0], width);\n\t      height = Math.max(min[1], height);\n\t    }\n\t    if (max) {\n\t      width = Math.min(max[0], width);\n\t      height = Math.min(max[1], height);\n\t    }\n\t    return [width, height];\n\t  },\n\t\n\t  render: function render() {\n\t    // Basic wrapper around a Resizable instance.\n\t    // If you use Resizable directly, you are responsible for updating the component\n\t    // with a new width and height.\n\t    var _props = this.props;\n\t    var handleSize = _props.handleSize;\n\t    var minConstraints = _props.minConstraints;\n\t    var maxConstraints = _props.maxConstraints;\n\t\n\t    var props = _objectWithoutProperties(_props, ['handleSize', 'minConstraints', 'maxConstraints']);\n\t\n\t    return React.createElement(\n\t      Resizable,\n\t      {\n\t        minConstraints: minConstraints,\n\t        maxConstraints: maxConstraints,\n\t        handleSize: handleSize,\n\t        width: this.state.width,\n\t        height: this.state.height,\n\t        onResizeStart: this.props.onResizeStart,\n\t        onResize: this.onResize,\n\t        onResizeStop: this.props.onResizeStop,\n\t        draggableOpts: this.props.draggableOpts\n\t      },\n\t      React.createElement(\n\t        'div',\n\t        _extends({ style: { width: this.state.width + 'px', height: this.state.height + 'px' } }, props),\n\t        this.props.children\n\t      )\n\t    );\n\t  }\n\t});\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar assign = __webpack_require__(4);\n\tvar React = __webpack_require__(1);\n\t\n\tmodule.exports = function cloneElement(element, props) {\n\t  if (props.style && element.props.style) {\n\t    props.style = assign({}, element.props.style, props.style);\n\t  }\n\t  if (props.className && element.props.className) {\n\t    props.className = element.props.className + ' ' + props.className;\n\t  }\n\t  return React.cloneElement(element, props);\n\t};\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tmodule.exports = function() {\n\t  throw new Error(\"Don't instantiate Resizable directly! Use require('react-resizable').Resizable\");\n\t};\n\t\n\tmodule.exports.Resizable = __webpack_require__(8);\n\tmodule.exports.ResizableBox = __webpack_require__(20);\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\r\n\tvar React    = __webpack_require__(1)\r\n\t  , hasOwn   = Object.prototype.hasOwnProperty\r\n\t  , version  = React.version.split('.').map(parseFloat)\r\n\t  , RESERVED = {\r\n\t      className:  resolve(joinClasses),\r\n\t      children:   function(){},\r\n\t      key:        function(){},\r\n\t      ref:        function(){},\r\n\t      style:      resolve(extend)\r\n\t    };\r\n\t\r\n\tmodule.exports = function cloneWithProps(child, props) {\r\n\t  var newProps = mergeProps(props, child.props);\r\n\t\r\n\t  if (!hasOwn.call(newProps, 'children') && hasOwn.call(child.props, 'children'))\r\n\t    newProps.children = child.props.children;\r\n\t\r\n\t  // < 0.11\r\n\t  if (version[0] === 0 && version[1] < 11)\r\n\t    return child.constructor.ConvenienceConstructor(newProps);\r\n\t  \r\n\t  // 0.11\r\n\t  if (version[0] === 0 && version[1] === 11)\r\n\t    return child.constructor(newProps);\r\n\t\r\n\t  // 0.12\r\n\t  else if (version[0] === 0 && version[1] === 12){\r\n\t    MockLegacyFactory.isReactLegacyFactory = true\r\n\t    MockLegacyFactory.type = child.type\r\n\t    return React.createElement(MockLegacyFactory, newProps);\r\n\t  }\r\n\t\r\n\t  // 0.13+\r\n\t  return React.createElement(child.type, newProps);\r\n\t\r\n\t  function MockLegacyFactory(){}\r\n\t}\r\n\t\r\n\tfunction mergeProps(currentProps, childProps) {\r\n\t  var newProps = extend(currentProps), key\r\n\t\r\n\t  for (key in childProps) {\r\n\t    if (hasOwn.call(RESERVED, key) )\r\n\t      RESERVED[key](newProps, childProps[key], key)\r\n\t\r\n\t    else if ( !hasOwn.call(newProps, key) )\r\n\t      newProps[key] = childProps[key];\r\n\t  }\r\n\t  return newProps\r\n\t}\r\n\t\r\n\tfunction resolve(fn){\r\n\t  return function(src, value, key){\r\n\t    if( !hasOwn.call(src, key)) src[key] = value\r\n\t    else src[key] = fn(src[key], value)\r\n\t  }\r\n\t}\r\n\t\r\n\tfunction joinClasses(a, b){\r\n\t  if ( !a ) return b || ''\r\n\t  return a + (b ? ' ' + b : '')\r\n\t}\r\n\t\r\n\tfunction extend() {\r\n\t  var target = {};\r\n\t  for (var i = 0; i < arguments.length; i++) \r\n\t    for (var key in arguments[i]) if (hasOwn.call(arguments[i], key)) \r\n\t      target[key] = arguments[i][key]   \r\n\t  return target\r\n\t}\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Copyright 2013-2015, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule shallowEqual\n\t */\n\t\n\t'use strict';\n\t\n\t/**\n\t * Performs equality by iterating through keys on an object and returning\n\t * false when any key has values which are not strictly equal between\n\t * objA and objB. Returns true when the values of all keys are strictly equal.\n\t *\n\t * @return {boolean}\n\t */\n\tfunction shallowEqual(objA, objB) {\n\t  if (objA === objB) {\n\t    return true;\n\t  }\n\t  var key;\n\t  // Test for A's keys different from B.\n\t  for (key in objA) {\n\t    if (objA.hasOwnProperty(key) &&\n\t        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {\n\t      return false;\n\t    }\n\t  }\n\t  // Test for B's keys missing from A.\n\t  for (key in objB) {\n\t    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n\t      return false;\n\t    }\n\t  }\n\t  return true;\n\t}\n\t\n\tmodule.exports = shallowEqual;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** react-grid-layout.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap eee5caa5f87b547e6ce9\n **/","module.exports = require('./lib/ReactGridLayout');\nmodule.exports.Responsive = require('./lib/ResponsiveReactGridLayout');\n\n\n\n/** WEBPACK FOOTER **\n ** ./index-dev.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\",\"root\":\"React\"}\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nvar assign = require('object-assign');\n\nvar utils = module.exports = {\n\n  /**\n   * Return the bottom coordinate of the layout.\n   *\n   * @param  {Array} layout Layout array.\n   * @return {Number}       Bottom coordinate.\n   */\n  bottom(layout) {\n    var max = 0, bottomY;\n    for (var i = 0, len = layout.length; i < len; i++) {\n      bottomY = layout[i].y + layout[i].h;\n      if (bottomY > max) max = bottomY;\n    }\n    return max;\n  },\n\n  /**\n   * Clones a shallow object.\n   * @param  {Object} obj Object to clone.\n   * @return {Object}   Cloned object.\n   */\n  clone(obj) {\n    return assign({}, obj);\n  },\n\n  /**\n   * Given two layouts, check if they collide.\n   *\n   * @param  {Object} l1 Layout object.\n   * @param  {Object} l2 Layout object.\n   * @return {Boolean}   True if colliding.\n   */\n  collides(l1, l2) {\n    if (l1 === l2) return false; // same element\n    if (l1.x + l1.w <= l2.x) return false; // l1 is left of l2\n    if (l1.x >= l2.x + l2.w) return false; // l1 is right of l2\n    if (l1.y + l1.h <= l2.y) return false; // l1 is above l2\n    if (l1.y >= l2.y + l2.h) return false; // l1 is below l2\n    return true; // boxes overlap\n  },\n\n  /**\n   * Given a layout, compact it. This involves going down each y coordinate and removing gaps\n   * between items.\n   *\n   * @param  {Array} layout Layout.\n   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n   *   vertically.\n   * @return {Array}       Compacted Layout.\n   */\n  compact(layout, verticalCompact) {\n    // Statics go in the compareWith array right away so items flow around them.\n    var compareWith = utils.getStatics(layout), out = [];\n    // We go through the items by row and column.\n    var sorted = utils.sortLayoutItemsByRowCol(layout);\n\n    for (var i = 0, len = sorted.length; i < len; i++) {\n      var l = sorted[i];\n\n      // Don't move static elements\n      if (!l.static) {\n        l = utils.compactItem(compareWith, l, verticalCompact);\n\n        // Add to comparison array. We only collide with items before this one.\n        // Statics are already in this array.\n        compareWith.push(l);\n      }\n\n      // Add to output array to make sure they still come out in the right order.\n      out[layout.indexOf(l)] = l;\n\n      // Clear moved flag, if it exists.\n      delete l.moved;\n    }\n\n    return out;\n  },\n\n  compactItem(compareWith, l, verticalCompact) {\n    if (verticalCompact) {\n      // Move the element up as far as it can go without colliding.\n      while (l.y > 0 && !utils.getFirstCollision(compareWith, l)) {\n        l.y--;\n      }\n    }\n\n    // Move it down, and keep moving it down if it's colliding.\n    var collides;\n    while((collides = utils.getFirstCollision(compareWith, l))) {\n      l.y = collides.y + collides.h;\n    }\n    return l;\n  },\n\n  /**\n   * Given a layout, make sure all elements fit within its bounds.\n   *\n   * @param  {Array} layout Layout array.\n   * @param  {Number} bounds Number of columns.\n   * @return {[type]}        [description]\n   */\n  correctBounds(layout, bounds) {\n    var collidesWith = utils.getStatics(layout);\n    for (var i = 0, len = layout.length; i < len; i++) {\n      var l = layout[i];\n      // Overflows right\n      if (l.x + l.w > bounds.cols) l.x = bounds.cols - l.w;\n      // Overflows left\n      if (l.x < 0) {\n        l.x = 0;\n        l.w = bounds.cols;\n      }\n      if (!l.static) collidesWith.push(l);\n      else {\n        // If this is static and collides with other statics, we must move it down.\n        // We have to do something nicer than just letting them overlap.\n        while(utils.getFirstCollision(collidesWith, l)) {\n          l.y++;\n        }\n      }\n\n    }\n    return layout;\n  },\n\n  /**\n   * Get a layout item by ID. Used so we can override later on if necessary.\n   *\n   * @param  {Array}  layout Layout array.\n   * @param  {Number} id     ID\n   * @return {LayoutItem}    Item at ID.\n   */\n  getLayoutItem(layout, id) {\n    id = \"\" + id;\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (\"\" + layout[i].i === id) return layout[i];\n    }\n  },\n\n  /**\n   * Returns the first item this layout collides with.\n   * It doesn't appear to matter which order we approach this from, although\n   * perhaps that is the wrong thing to do.\n   *\n   * @param  {Object} layoutItem Layout item.\n   * @return {Object|undefined}  A colliding layout item, or undefined.\n   */\n  getFirstCollision(layout, layoutItem) {\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (utils.collides(layout[i], layoutItem)) return layout[i];\n    }\n  },\n\n  getAllCollisions(layout, layoutItem) {\n    var out = [];\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (utils.collides(layout[i], layoutItem)) out.push(layout[i]);\n    }\n    return out;\n  },\n\n  /**\n   * Get all static elements.\n   * @param  {Array} layout Array of layout objects.\n   * @return {Array}        Array of static layout items..\n   */\n  getStatics(layout) {\n    var out = [];\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (layout[i].static) out.push(layout[i]);\n    }\n    return out;\n  },\n\n  /**\n   * Move an element. Responsible for doing cascading movements of other elements.\n   *\n   * @param  {Array}      layout Full layout to modify.\n   * @param  {LayoutItem} l      element to move.\n   * @param  {Number}     [x]    X position in grid units.\n   * @param  {Number}     [y]    Y position in grid units.\n   * @param  {Boolean}    [isUserAction] If true, designates that the item we're moving is\n   *                                     being dragged/resized by th euser.\n   */\n  moveElement(layout, l, x, y, isUserAction) {\n    if (l.static) return layout;\n\n    // Short-circuit if nothing to do.\n    if (l.y === y && l.x === x) return layout;\n\n    var movingUp = l.y > y;\n    // This is quite a bit faster than extending the object\n    if (x !== undefined) l.x = x;\n    if (y !== undefined) l.y = y;\n    l.moved = true;\n\n    // If this collides with anything, move it.\n    // When doing this comparison, we have to sort the items we compare with\n    // to ensure, in the case of multiple collisions, that we're getting the\n    // nearest collision.\n    var sorted = utils.sortLayoutItemsByRowCol(layout);\n    if (movingUp) sorted = sorted.reverse();\n    var collisions = utils.getAllCollisions(sorted, l);\n\n    // Move each item that collides away from this element.\n    for (var i = 0, len = collisions.length; i < len; i++) {\n      var collision = collisions[i];\n      // console.log('resolving collision between', l.i, 'at', l.y, 'and', collision.i, 'at', collision.y);\n\n      // Short circuit so we can't infinite loop\n      if (collision.moved) continue;\n\n      // This makes it feel a bit more precise by waiting to swap for just a bit when moving up.\n      if (l.y > collision.y && l.y - collision.y > collision.h / 4) continue;\n\n      // Don't move static items - we have to move *this* element away\n      if (collision.static) {\n        layout = utils.moveElementAwayFromCollision(layout, collision, l, isUserAction);\n      } else {\n        layout = utils.moveElementAwayFromCollision(layout, l, collision, isUserAction);\n      }\n    }\n\n    return layout;\n  },\n\n  /**\n   * This is where the magic needs to happen - given a collision, move an element away from the collision.\n   * We attempt to move it up if there's room, otherwise it goes below.\n   *\n   * @param  {Array} layout            Full layout to modify.\n   * @param  {LayoutItem} collidesWith Layout item we're colliding with.\n   * @param  {LayoutItem} itemToMove   Layout item we're moving.\n   * @param  {Boolean} [isUserAction]  If true, designates that the item we're moving is being dragged/resized\n   *                                   by the user.\n   */\n  moveElementAwayFromCollision(layout, collidesWith, itemToMove, isUserAction) {\n\n    // If there is enough space above the collision to put this element, move it there.\n    // We only do this on the main collision as this can get funky in cascades and cause\n    // unwanted swapping behavior.\n    if (isUserAction) {\n      // Make a mock item so we don't modify the item here, only modify in moveElement.\n      var fakeItem = {\n        x: itemToMove.x,\n        y: itemToMove.y,\n        w: itemToMove.w,\n        h: itemToMove.h\n      };\n      fakeItem.y = Math.max(collidesWith.y - itemToMove.h, 0);\n      if (!utils.getFirstCollision(layout, fakeItem)) {\n        return utils.moveElement(layout, itemToMove, undefined, fakeItem.y);\n      }\n    }\n\n    // Previously this was optimized to move below the collision directly, but this can cause problems\n    // with cascading moves, as an item may actually leapflog a collision and cause a reversal in order.\n    return utils.moveElement(layout, itemToMove, undefined, itemToMove.y + 1);\n  },\n\n  /**\n   * Helper to convert a number to a percentage string.\n   *\n   * @param  {Number} num Any number\n   * @return {String}     That number as a percentage.\n   */\n  perc(num) {\n    return num * 100 + '%';\n  },\n\n  setTransform(style, coords) {\n    // Replace unitless items with px\n    var x = ('' + Math.round(coords[0])).replace(/(\\d)$/, '$1px');\n    var y = ('' + Math.round(coords[1])).replace(/(\\d)$/, '$1px');\n    style.transform = \"translate(\" + x + \",\" + y + \")\";\n    style.WebkitTransform = \"translate(\" + x + \",\" + y + \")\";\n    style.MozTransform = \"translate(\" + x + \",\" + y + \")\";\n    style.msTransform = \"translate(\" + x + \",\" + y + \")\";\n    style.OTransform = \"translate(\" + x + \",\" + y + \")\";\n    return style;\n  },\n\n  /**\n   * Get layout items sorted from top left to right and down.\n   *\n   * @return {Array} Array of layout objects.\n   * @return {Array}        Layout, sorted static items first.\n   */\n  sortLayoutItemsByRowCol(layout) {\n    return [].concat(layout).sort(function(a, b) {\n      if (a.y > b.y || (a.y === b.y && a.x > b.x)) {\n        return 1;\n      }\n      return -1;\n    });\n  },\n\n  /**\n   * Generate a layout using the initialLayout and children as a template.\n   * Missing entries will be added, extraneous ones will be truncated.\n   *\n   * @param  {Array}  initialLayout Layout passed in through props.\n   * @param  {String} breakpoint    Current responsive breakpoint.\n   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n   *   vertically.\n   * @return {Array}                Working layout.\n   */\n  synchronizeLayoutWithChildren(initialLayout, children, cols, verticalCompact) {\n    // ensure 'children' is always an array\n    if (!Array.isArray(children)) {\n      children = [children];\n    }\n    initialLayout = initialLayout || [];\n\n    // Generate one layout item per child.\n    var layout = [];\n    for (var i = 0, len = children.length; i < len; i++) {\n      var child = children[i];\n      // Don't overwrite if it already exists.\n      var exists = utils.getLayoutItem(initialLayout, child.key);\n      if (exists) {\n        // Ensure 'i' is always a string\n        exists.i = '' + exists.i;\n        layout.push(exists);\n        continue;\n      }\n      // New item: attempt to use a layout item from the child, if it exists.\n      var g = child.props._grid;\n      if (g) {\n        utils.validateLayout([g], 'ReactGridLayout.child');\n        // Validated; add it to the layout. Bottom 'y' possible is the bottom of the layout.\n        // This allows you to do nice stuff like specify {y: Infinity}\n        if (verticalCompact) {\n          layout.push(assign({}, g, {y: Math.min(utils.bottom(layout), g.y), i: child.key}));\n        } else {\n          layout.push(assign({}, g, {y: g.y, i:child.key}));\n        }\n      } else {\n        // Nothing provided: ensure this is added to the bottom\n        layout.push({w: 1, h: 1, x: 0, y: utils.bottom(layout), i: child.key});\n      }\n    }\n\n    // Correct the layout.\n    layout = utils.correctBounds(layout, {cols: cols});\n    layout = utils.compact(layout, verticalCompact);\n\n    return layout;\n  },\n\n  /**\n   * Validate a layout. Throws errors.\n   *\n   * @param  {Array}  layout        Array of layout items.\n   * @param  {String} [contextName] Context name for errors.\n   * @throw  {Error}                Validation error.\n   */\n  validateLayout(layout, contextName) {\n    contextName = contextName || \"Layout\";\n    var subProps = ['x', 'y', 'w', 'h'];\n    if (!Array.isArray(layout)) throw new Error(contextName + \" must be an array!\");\n    for (var i = 0, len = layout.length; i < len; i++) {\n      for (var j = 0; j < subProps.length; j++) {\n        if (typeof layout[i][subProps[j]] !== 'number') {\n          throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].' + subProps[j] + ' must be a Number!');\n        }\n      }\n      if (layout[i].static !== undefined && typeof layout[i].static !== 'boolean') {\n        throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].static must be a Boolean!');\n      }\n    }\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/utils.js\n **/","'use strict';\nvar deepEqual = require('deep-equal');\n\n// Like PureRenderMixin, but with deep comparisons.\nvar PureDeepRenderMixin = {\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return !deepEqual(this.props, nextProps) ||\n           !deepEqual(this.state, nextState);\n  }\n};\n\nmodule.exports = PureDeepRenderMixin;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/mixins/PureDeepRenderMixin.js\n **/","'use strict';\n\nfunction ToObject(val) {\n\tif (val == null) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nmodule.exports = Object.assign || function (target, source) {\n\tvar from;\n\tvar keys;\n\tvar to = ToObject(target);\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = arguments[s];\n\t\tkeys = Object.keys(Object(from));\n\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tto[keys[i]] = from[keys[i]];\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/object-assign/index.js\n ** module id = 4\n ** module chunks = 0\n **/","'use strict';\nvar React = require('react');\nvar GridItem = require('./GridItem');\nvar utils = require('./utils');\nvar PureDeepRenderMixin = require('./mixins/PureDeepRenderMixin');\nvar WidthListeningMixin = require('./mixins/WidthListeningMixin');\n\n/**\n * A reactive, fluid grid layout with draggable, resizable components.\n */\nvar ReactGridLayout = React.createClass({\n  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\n  propTypes: {\n    //\n    // Basic props\n    //\n\n    // If true, the container height swells and contracts to fit contents\n    autoSize: React.PropTypes.bool,\n    // # of cols.\n    cols: React.PropTypes.number,\n\n    // A selector that will not be draggable.\n    draggableCancel: React.PropTypes.string,\n    // A selector for the draggable handler\n    draggableHandle: React.PropTypes.string,\n\n    // If true, the layout will compact vertically\n    verticalCompact: React.PropTypes.bool,\n\n    // layout is an array of object with the format:\n    // {x: Number, y: Number, w: Number, h: Number, i: Number}\n    layout: function(props, propName, componentName) {\n      var layout = props.layout;\n      // I hope you're setting the _grid property on the grid items\n      if (layout === undefined) return;\n      utils.validateLayout(layout, 'layout');\n    },\n\n    layouts: function(props, propName, componentName) {\n      if (props.layouts) {\n        throw new Error(\"ReactGridLayout does not use `layouts`: Use ReactGridLayout.Responsive.\");\n      }\n    },\n\n    // margin between items [x, y] in px\n    margin: React.PropTypes.array,\n    // Rows have a static height, but you can change this based on breakpoints if you like\n    rowHeight: React.PropTypes.number,\n\n    //\n    // Flags\n    //\n    isDraggable: React.PropTypes.bool,\n    isResizable: React.PropTypes.bool,\n    // Use CSS transforms instead of top/left\n    useCSSTransforms: React.PropTypes.bool,\n\n    //\n    // Callbacks\n    //\n\n    // Callback so you can save the layout.\n    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n    onLayoutChange: React.PropTypes.func,\n\n    // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e).\n    // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.\n    onDragStart: React.PropTypes.func,\n    // Calls on each drag movement.\n    onDrag: React.PropTypes.func,\n    // Calls when drag is complete.\n    onDragStop: React.PropTypes.func,\n    //Calls when resize starts.\n    onResizeStart: React.PropTypes.func,\n    // Calls when resize movement happens.\n    onResize: React.PropTypes.func,\n    // Calls when resize is complete.\n    onResizeStop: React.PropTypes.func,\n\n    //\n    // Other validations\n    //\n\n    // Children must not have duplicate keys.\n    children: function(props, propName, componentName) {\n      React.PropTypes.node.apply(this, arguments);\n      var children = props[propName];\n\n      // Check children keys for duplicates. Throw if found.\n      var keys = {};\n      React.Children.forEach(children, function(child, i, list) {\n        if (keys[child.key]) {\n          throw new Error(\"Duplicate child key found! This will cause problems in ReactGridLayout.\");\n        }\n        keys[child.key] = true;\n      });\n    }\n  },\n\n  getDefaultProps() {\n    return {\n      autoSize: true,\n      cols: 12,\n      rowHeight: 150,\n      layout: [],\n      margin: [10, 10],\n      isDraggable: true,\n      isResizable: true,\n      useCSSTransforms: true,\n      verticalCompact: true,\n      onLayoutChange: function(){},\n      onDragStart: function() {},\n      onDrag: function() {},\n      onDragStop: function() {},\n      onResizeStart: function() {},\n      onResize: function() {},\n      onResizeStop: function() {}\n    };\n  },\n\n  getInitialState() {\n    return {\n      activeDrag: null,\n      isMounted: false,\n      layout: utils.synchronizeLayoutWithChildren(this.props.layout, this.props.children, this.props.cols, this.props.verticalCompact),\n      width: this.props.initialWidth,\n      oldDragItem: null,\n      oldResizeItem: null\n    };\n  },\n\n  componentDidMount() {\n    // Call back with layout on mount. This should be done after correcting the layout width\n    // to ensure we don't rerender with the wrong width.\n    this.props.onLayoutChange(this.state.layout);\n    this.setState({isMounted: true});\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // This allows you to set the width manually if you like.\n    // Use manual width changes in combination with `listenToWindowResize: false`\n    if (nextProps.width !== this.props.width) this.onWidthChange(nextProps.width);\n\n    // If children change, regenerate the layout.\n    if (nextProps.children.length !== this.props.children.length) {\n      this.setState({\n        layout: utils.synchronizeLayoutWithChildren(this.state.layout, nextProps.children, nextProps.cols, this.props.verticalCompact)\n      });\n    }\n\n    // Allow parent to set layout directly.\n    if (nextProps.layout && JSON.stringify(nextProps.layout) !== JSON.stringify(this.state.layout)) {\n      this.setState({\n        layout: utils.synchronizeLayoutWithChildren(nextProps.layout, nextProps.children, nextProps.cols, this.props.verticalCompact)\n      });\n    }\n  },\n\n  componentDidUpdate(prevProps, prevState) {\n    // Call back so we can store the layout\n    // Do it only when a resize/drag is not active, otherwise there are way too many callbacks\n    if (this.state.layout !== prevState.layout && !this.state.activeDrag) {\n      this.props.onLayoutChange(this.state.layout, this.state.layouts);\n    }\n  },\n\n  /**\n   * Calculates a pixel value for the container.\n   * @return {String} Container height in pixels.\n   */\n  containerHeight() {\n    if (!this.props.autoSize) return;\n    return utils.bottom(this.state.layout) * this.props.rowHeight + this.props.margin[1] + 'px';\n  },\n\n  /**\n   * When the width changes, save it to state. This helps with left/width calculations.\n   */\n  onWidthChange(width) {\n    this.setState({width: width});\n  },\n\n  /**\n   * When dragging starts\n   * @param {Number} i Index of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} element The current dragging DOM element\n   * @param {Object} position Drag information\n   */\n  onDragStart(i, x, y, {e, element, position}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n\n    this.setState({oldDragItem: utils.clone(l)});\n\n    this.props.onDragStart(layout, l, l, null, e);\n  },\n  /**\n   * Each drag movement create a new dragelement and move the element to the dragged location\n   * @param {Number} i Index of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} element The current dragging DOM element\n   * @param {Object} position Drag information\n   */\n  onDrag(i, x, y, {e, element, position}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    var oldL = this.state.oldDragItem;\n\n    // Create placeholder (display only)\n    var placeholder = {\n      w: l.w, h: l.h, x: l.x, y: l.y, placeholder: true, i: i\n    };\n\n    // Move the element to the dragged location.\n    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\n    this.props.onDrag(layout, oldL, l, placeholder, e);\n\n\n    this.setState({\n      layout: utils.compact(layout, this.props.verticalCompact),\n      activeDrag: placeholder\n    });\n  },\n\n  /**\n   * When dragging stops, figure out which position the element is closest to and update its x and y.\n   * @param  {Number} i Index of the child.\n   * @param {Number} i Index of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} element The current dragging DOM element\n   * @param {Object} position Drag information\n   */\n  onDragStop(i, x, y, {e, element, position}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    var oldL = this.state.oldDragItem;\n\n    // Move the element here\n    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\n    this.props.onDragStop(layout, oldL, l, null, e);\n\n    // Set state\n    this.setState({\n      layout: utils.compact(layout, this.props.verticalCompact),\n      activeDrag: null,\n      oldDragItem: null\n    });\n  },\n\n  onResizeStart(i, w, h, {e, element, size}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n\n    this.setState({oldResizeItem: utils.clone(l)});\n\n    this.props.onResizeStart(layout, l, l, null, e);\n  },\n\n  onResize(i, w, h, {e, element, size}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    var oldL = this.state.oldResizeItem;\n\n    // Set new width and height.\n    l.w = w;\n    l.h = h;\n\n    // Create placeholder element (display only)\n    var placeholder = {\n      w: w, h: h, x: l.x, y: l.y, placeholder: true, i: i\n    };\n\n    this.props.onResize(layout, oldL, l, placeholder, e);\n\n    // Re-compact the layout and set the drag placeholder.\n    this.setState({ layout: utils.compact(layout, this.props.verticalCompact), activeDrag: placeholder });\n  },\n\n  onResizeStop(i, x, y, {e, element, size}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    var oldL = this.state.oldResizeItem;\n\n    this.props.onResizeStop(layout, oldL, l, null, e);\n\n    this.setState({\n      layout: utils.compact(layout, this.props.verticalCompact),\n      activeDrag: null,\n      oldResizeItem: null\n    });\n  },\n\n  /**\n   * Create a placeholder object.\n   * @return {Element} Placeholder div.\n   */\n  placeholder() {\n    if (!this.state.activeDrag) return '';\n\n    // {...this.state.activeDrag} is pretty slow, actually\n    return (\n      <GridItem\n        w={this.state.activeDrag.w}\n        h={this.state.activeDrag.h}\n        x={this.state.activeDrag.x}\n        y={this.state.activeDrag.y}\n        i={this.state.activeDrag.i}\n        isPlaceholder={true}\n        className=\"react-grid-placeholder\"\n        containerWidth={this.state.width}\n        cols={this.props.cols}\n        margin={this.props.margin}\n        rowHeight={this.props.rowHeight}\n        isDraggable={false}\n        isResizable={false}\n        useCSSTransforms={this.props.useCSSTransforms}\n        >\n        <div />\n      </GridItem>\n    );\n  },\n\n  /**\n   * Given a grid item, set its style attributes & surround in a <Draggable>.\n   * @param  {Element} child React element.\n   * @param  {Number}  i     Index of element.\n   * @return {Element}       Element wrapped in draggable and properly placed.\n   */\n  processGridItem(child) {\n    var i = child.key;\n    var l = utils.getLayoutItem(this.state.layout, i);\n\n    // watchStart property tells Draggable to react to changes in the start param\n    // Must be turned off on the item we're dragging as the changes in `activeDrag` cause rerenders\n    var moveOnStartChange = !(this.state.activeDrag && this.state.activeDrag.i === i);\n\n    // Parse 'static'. Any properties defined directly on the grid item will take precedence.\n    var draggable, resizable;\n    if (l.static || this.props.isDraggable === false) draggable = false;\n    if (l.static || this.props.isResizable === false) resizable = false;\n\n    return (\n      <GridItem\n        containerWidth={this.state.width}\n        cols={this.props.cols}\n        margin={this.props.margin}\n        rowHeight={this.props.rowHeight}\n        moveOnStartChange={moveOnStartChange}\n        cancel={this.props.draggableCancel}\n        handle={this.props.draggableHandle}\n        onDragStop={this.onDragStop}\n        onDragStart={this.onDragStart}\n        onDrag={this.onDrag}\n        onResizeStart={this.onResizeStart}\n        onResize={this.onResize}\n        onResizeStop={this.onResizeStop}\n        isDraggable={draggable}\n        isResizable={resizable}\n        useCSSTransforms={this.props.useCSSTransforms && this.state.isMounted}\n        usePercentages={!this.state.isMounted}\n        {...l}\n        >\n        {child}\n      </GridItem>\n    );\n  },\n\n  render() {\n    // Calculate classname\n    var {className, ...props} = this.props;\n    className = 'react-grid-layout ' + (className || '');\n\n    return (\n      <div {...props} className={className} style={{height: this.containerHeight()}}>\n        {React.Children.map(this.props.children, this.processGridItem)}\n        {this.placeholder()}\n      </div>\n    );\n  }\n});\n\nmodule.exports = ReactGridLayout;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/ReactGridLayout.jsx\n **/","'use strict';\nvar React = require('react');\n\n/**\n * A simple mixin that provides facility for listening to container resizes.\n */\nvar WidthListeningMixin = {\n\n  propTypes: {\n    // This allows setting this on the server side\n    initialWidth: React.PropTypes.number,\n\n    // If false, you should supply width yourself. Good if you want to debounce resize events\n    // or reuse a handler from somewhere else.\n    listenToWindowResize: React.PropTypes.bool\n  },\n\n  getDefaultProps: function() {\n    return {\n      initialWidth: 1280,\n      listenToWindowResize: true\n    };\n  },\n\n  componentDidMount: function() {\n    if (this.props.listenToWindowResize) {\n      window.addEventListener('resize', this.onWindowResize);\n      // This is intentional. Once to properly set the breakpoint and resize the elements,\n      // and again to compensate for any scrollbar that appeared because of the first step.\n      this.onWindowResize();\n      this.onWindowResize();\n    }\n  },\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onWindowResize);\n  },\n\n  /**\n   * On window resize, update width.\n   */\n  onWindowResize: function() {\n    this.onWidthChange(this.getDOMNode().offsetWidth);\n  }\n\n};\n\nmodule.exports = WidthListeningMixin;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/mixins/WidthListeningMixin.js\n **/","module.exports = require('./lib/draggable');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-draggable/index.js\n ** module id = 7\n ** module chunks = 0\n **/","'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar React = require('react');\nvar Draggable = require('react-draggable');\nvar PureRenderMixin = require('react/lib/ReactComponentWithPureRenderMixin');\nvar assign = require('object-assign');\nvar cloneElement = require('./cloneElement');\n\nvar Resizable = module.exports = React.createClass({\n  displayName: 'Resizable',\n  mixins: [PureRenderMixin],\n\n  propTypes: {\n    // Require that one and only one child be present.\n    children: React.PropTypes.element.isRequired,\n    // Functions\n    onResizeStop: React.PropTypes.func,\n    onResizeStart: React.PropTypes.func,\n    onResize: React.PropTypes.func,\n\n    width: React.PropTypes.number.isRequired,\n    height: React.PropTypes.number.isRequired,\n    // If you change this, be sure to update your css\n    handleSize: React.PropTypes.array,\n    // These will be passed wholesale to react-draggable\n    draggableOpts: React.PropTypes.object\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      handleSize: [20, 20]\n    };\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      bounds: this.constraintsToBounds(),\n      initialWidth: this.props.width,\n      initialHeight: this.props.height\n    };\n  },\n\n  componentWillReceiveProps: function componentWillReceiveProps(props) {\n    if (!this.state.resizing) {\n      this.setState({\n        initialWidth: props.width,\n        initialHeight: props.height,\n        bounds: this.constraintsToBounds()\n      });\n      this.refs.draggable.resetState();\n    }\n  },\n\n  constraintsToBounds: function constraintsToBounds() {\n    var p = this.props;\n    var mins = p.minConstraints || p.handleSize;\n    var maxes = p.maxConstraints || [Infinity, Infinity];\n    return {\n      left: mins[0] - p.width,\n      top: mins[1] - p.height,\n      right: maxes[0] - p.width,\n      bottom: maxes[1] - p.height\n    };\n  },\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n  resizeHandler: function resizeHandler(handlerName) {\n    var me = this;\n    return function (e, _ref) {\n      var node = _ref.node;\n      var position = _ref.position;\n\n      me.props[handlerName] && me.props[handlerName](e, { node: node, size: calcWH(me.state, position) });\n\n      if (handlerName === 'onResizeStart') {\n        me.setState({ resizing: true });\n      } else if (handlerName === 'onResizeStop') {\n        me.setState({ resizing: false });\n      }\n    };\n  },\n\n  render: function render() {\n    var p = this.props,\n        s = this.state;\n\n    // What we're doing here is getting the child of this element, and cloning it with this element's props.\n    // We are then defining its children as:\n    // Its original children (resizable's child's children), and\n    // A draggable handle.\n    return cloneElement(p.children, assign({}, p, {\n      children: [p.children.props.children, React.createElement(\n        Draggable,\n        _extends({}, p.draggableOpts, {\n          ref: 'draggable',\n          onStop: this.resizeHandler('onResizeStop'),\n          onStart: this.resizeHandler('onResizeStart'),\n          onDrag: this.resizeHandler('onResize'),\n          bounds: this.state.bounds\n        }),\n        React.createElement('span', { className: 'react-resizable-handle' })\n      )]\n    }));\n  }\n});\n\n/**\n * Parse left and top coordinates.\n * @param  {Number} options.left Left coordinate.\n * @param  {Number} options.top  Top coordinate.\n * @return {Object}              Coordinates\n */\nfunction calcWH(_ref, _ref2) {\n  var initialWidth = _ref.initialWidth;\n  var initialHeight = _ref.initialHeight;\n  var left = _ref2.left;\n  var top = _ref2.top;\n\n  return { width: initialWidth + left, height: initialHeight + top };\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-resizable/build/Resizable.js\n ** module id = 8\n ** module chunks = 0\n **/","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n* @providesModule ReactComponentWithPureRenderMixin\n*/\n\n'use strict';\n\nvar shallowEqual = require(\"./shallowEqual\");\n\n/**\n * If your React component's render function is \"pure\", e.g. it will render the\n * same result given the same props and state, provide this Mixin for a\n * considerable performance boost.\n *\n * Most React components have pure render functions.\n *\n * Example:\n *\n *   var ReactComponentWithPureRenderMixin =\n *     require('ReactComponentWithPureRenderMixin');\n *   React.createClass({\n *     mixins: [ReactComponentWithPureRenderMixin],\n *\n *     render: function() {\n *       return <div className={this.props.className}>foo</div>;\n *     }\n *   });\n *\n * Note: This only checks shallow equality for props and state. If these contain\n * complex data structures this mixin may have false-negatives for deeper\n * differences. Only mixin to components which have simple props and state, or\n * use `forceUpdate()` when you know deep data structures have changed.\n */\nvar ReactComponentWithPureRenderMixin = {\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return !shallowEqual(this.props, nextProps) ||\n           !shallowEqual(this.state, nextState);\n  }\n};\n\nmodule.exports = ReactComponentWithPureRenderMixin;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/ReactComponentWithPureRenderMixin.js\n ** module id = 9\n ** module chunks = 0\n **/","'use strict';\nvar React = require('react');\nvar cloneWithProps = require('react/lib/cloneWithProps');\nvar utils = require('./utils');\nvar Draggable = require('react-draggable');\nvar Resizable = require('react-resizable').Resizable;\nvar PureDeepRenderMixin = require('./mixins/PureDeepRenderMixin');\n\n/**\n * An individual item within a ReactGridLayout.\n */\nvar GridItem = React.createClass({\n  mixins: [PureDeepRenderMixin],\n\n  propTypes: {\n    // Children must be only a single element\n    children: React.PropTypes.element,\n\n    // General grid attributes\n    cols: React.PropTypes.number.isRequired,\n    containerWidth: React.PropTypes.number.isRequired,\n    rowHeight: React.PropTypes.number.isRequired,\n    margin: React.PropTypes.array.isRequired,\n\n    // These are all in grid units\n    x: React.PropTypes.number.isRequired,\n    y: React.PropTypes.number.isRequired,\n    w: React.PropTypes.number.isRequired,\n    h: React.PropTypes.number.isRequired,\n\n    // All optional\n    minW: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.minW > props.w || props.minW > props.maxW) constraintError('minW', props);\n    },\n    maxW: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.maxW < props.w || props.maxW < props.minW) constraintError('maxW', props);\n    },\n    minH: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.minH > props.h || props.minH > props.maxH) constraintError('minH', props);\n    },\n    maxH: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.maxH < props.h || props.maxH < props.minH) constraintError('maxH', props);\n    },\n\n    // ID is nice to have for callbacks\n    i: React.PropTypes.string.isRequired,\n\n    // If true, item will be repositioned when x/y/w/h change\n    moveOnStartChange: React.PropTypes.bool,\n\n    // Functions\n    onDragStop: React.PropTypes.func,\n    onDragStart: React.PropTypes.func,\n    onDrag: React.PropTypes.func,\n    onResizeStop: React.PropTypes.func,\n    onResizeStart: React.PropTypes.func,\n    onResize: React.PropTypes.func,\n\n    // Flags\n    isDraggable: React.PropTypes.bool,\n    isResizable: React.PropTypes.bool,\n    // Use CSS transforms instead of top/left\n    useCSSTransforms: React.PropTypes.bool,\n    isPlaceholder: React.PropTypes.bool,\n\n    // Others\n    className: React.PropTypes.string,\n    // Selector for draggable handle\n    handle: React.PropTypes.string,\n    // Selector for draggable cancel (see react-draggable)\n    cancel: React.PropTypes.string\n  },\n\n  getDefaultProps() {\n    return {\n      isDraggable: true,\n      isResizable: true,\n      useCSSTransforms: true,\n      className: '',\n      cancel: '',\n      minH: 1,\n      minW: 1,\n      maxH: Infinity,\n      maxW: Infinity\n    };\n  },\n\n  getInitialState() {\n    return {\n      resizing: false,\n      className: ''\n    };\n  },\n\n  /**\n   * Return position on the page given an x, y, w, h.\n   * left, top, width, height are all in pixels.\n   * @param  {Number}  x             X coordinate in grid units.\n   * @param  {Number}  y             Y coordinate in grid units.\n   * @param  {Number}  w             W coordinate in grid units.\n   * @param  {Number}  h             H coordinate in grid units.\n   * @return {Object}                Object containing coords.\n   */\n  calcPosition(x, y, w, h) {\n    var p = this.props;\n    var width = p.containerWidth - p.margin[0];\n    var out = {\n      left: width * (x / p.cols) + p.margin[0],\n      top: p.rowHeight * y + p.margin[1],\n      width: width * (w / p.cols) - p.margin[0],\n      height: h * p.rowHeight - p.margin[1]\n    };\n    return out;\n  },\n\n  /**\n   * Translate x and y coordinates from pixels to grid units.\n   * @param  {Number} options.left  Left offset in pixels.\n   * @param  {Number} options.top   Top offset in pixels.\n   * @return {Object}               x and y in grid units.\n   */\n  calcXY({left, top}) {\n    left = left - this.props.margin[0];\n    top = top - this.props.margin[1];\n    // This is intentional; because so much of the logic on moving boxes up/down relies\n    // on an exact y position, we only round the x, not the y.\n    var x = Math.round((left / this.props.containerWidth) * this.props.cols);\n    var y = Math.floor(top / this.props.rowHeight);\n    x = Math.max(Math.min(x, this.props.cols), 0);\n    y = Math.max(y, 0);\n    return {x, y};\n  },\n\n  /**\n   * Given a height and width in pixel values, calculate grid units.\n   * @param  {Number} options.height Height in pixels.\n   * @param  {Number} options.width  Width in pixels.\n   * @return {Object}                w, h as grid units.\n   */\n  calcWH({height, width}) {\n    width = width + this.props.margin[0];\n    height = height + this.props.margin[1];\n    var w = Math.round((width / this.props.containerWidth) * this.props.cols);\n    var h = Math.round(height / this.props.rowHeight);\n    w = Math.max(Math.min(w, this.props.cols - this.props.x), 0);\n    h = Math.max(h, 0);\n    return {w, h};\n  },\n\n  /**\n   * This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it\n   * well when server rendering, and the only way to do that properly is to use percentage width/left because\n   * we don't know exactly what the browser viewport is.\n   * Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage\n   * left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.\n   *\n   * @param  {Object} pos Position object with width, height, left, top.\n   * @return {Object}     Style object.\n   */\n  createStyle(pos) {\n    var style = {\n      width: pos.width + 'px',\n      height: pos.height + 'px',\n      left: pos.left + 'px',\n      top: pos.top + 'px',\n      position: 'absolute'\n    };\n\n    // This is used for server rendering.\n    if (this.props.usePercentages) {\n      pos.left = utils.perc(pos.left / this.props.containerWidth);\n      style.left = pos.left;\n      style.width = utils.perc(pos.width / this.props.containerWidth);\n    }\n\n    // CSS Transforms support\n    if (this.props.useCSSTransforms) {\n      utils.setTransform(style, [pos.left, pos.top]);\n      delete style.left;\n      delete style.top;\n    }\n\n    return style;\n  },\n\n  /**\n   * Mix a Draggable instance into a child.\n   * @param  {Element} child    Child element.\n   * @param  {Object} position  Position object (pixel values)\n   * @return {Element}          Child wrapped in Draggable.\n   */\n  mixinDraggable(child, position) {\n    var start = typeof position.left === \"string\" ? undefined : {x: position.left, y: position.top};\n    return (\n      <Draggable\n        start={start}\n        moveOnStartChange={this.props.moveOnStartChange}\n        onStop={this.onDragHandler('onDragStop')}\n        onStart={this.onDragHandler('onDragStart')}\n        onDrag={this.onDragHandler('onDrag')}\n        handle={this.props.handle}\n        cancel={\".react-resizable-handle \" + this.props.cancel}\n        useCSSTransforms={this.props.useCSSTransforms}\n        >\n        {child}\n      </Draggable>\n    );\n  },\n\n  /**\n   * Mix a Resizable instance into a child.\n   * @param  {Element} child    Child element.\n   * @param  {Object} position  Position object (pixel values)\n   * @return {Element}          Child wrapped in Resizable.\n   */\n  mixinResizable(child, position) {\n    var p = this.props;\n    // This is the max possible width - doesn't go to infinity because of the width of the window\n    var maxWidth = this.calcPosition(0, 0, p.cols - p.x, 0).width;\n\n    // Calculate min/max constraints using our min & maxes\n    var mins = this.calcPosition(0, 0, p.minW, p.minH);\n    var maxes = this.calcPosition(0, 0, p.maxW, p.maxH);\n    var minConstraints = [mins.width, mins.height];\n    var maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];\n    return (\n      <Resizable\n        width={position.width}\n        height={position.height}\n        minConstraints={minConstraints}\n        maxConstraints={maxConstraints}\n        onResizeStop={this.onResizeHandler('onResizeStop')}\n        onResizeStart={this.onResizeHandler('onResizeStart')}\n        onResize={this.onResizeHandler('onResize')}\n        >\n        {child}\n      </Resizable>\n    );\n  },\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   * All drag events call the function with the given handler name,\n   * with the signature (index, x, y).\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n  onDragHandler(handlerName) {\n    var me = this;\n    return function(e, {element, position}) {\n      if (!me.props[handlerName]) return;\n      // Get new XY\n      var {x, y} = me.calcXY(position);\n\n      // Cap x at numCols\n      x = Math.min(x, me.props.cols - me.props.w);\n\n      me.props[handlerName](me.props.i, x, y, {e, element, position});\n    };\n  },\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   * All drag events call the function with the given handler name,\n   * with the signature (index, x, y).\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n  onResizeHandler(handlerName) {\n    var me = this;\n    return function(e, {element, size}) {\n      if (!me.props[handlerName]) return;\n\n      // Get new XY\n      var {w, h} = me.calcWH(size);\n\n      // Cap w at numCols\n      w = Math.min(w, me.props.cols - me.props.x);\n      // Ensure w is at least 1\n      w = Math.max(w, 1);\n\n      // Min/max capping\n      w = Math.max(Math.min(w, me.props.maxW), me.props.minW);\n      h = Math.max(Math.min(h, me.props.maxH), me.props.minH);\n\n      me.setState({resizing: handlerName === 'onResizeStop' ? null : size});\n\n      me.props[handlerName](me.props.i, w, h, {e, element, size});\n    };\n  },\n\n  render() {\n    var p = this.props, pos = this.calcPosition(p.x, p.y, p.w, p.h);\n    if (this.state.resizing) {\n      pos.width = this.state.resizing.width;\n      pos.height = this.state.resizing.height;\n    }\n\n    // Create the child element. We clone the existing element but modify its className and style.\n    var child = cloneWithProps(this.props.children, {\n      // Munge a classname. Use passed in classnames and resizing.\n      // React with merge the classNames.\n      className: ['react-grid-item', this.props.className, this.state.resizing ? 'resizing' : '',\n        this.props.useCSSTransforms ? 'cssTransforms' : ''].join(' '),\n      // We can set the width and height on the child, but unfortunately we can't set the position.\n      style: this.createStyle(pos)\n    });\n\n    // Resizable support. This is usually on but the user can toggle it off.\n    if (this.props.isResizable) {\n      child = this.mixinResizable(child, pos);\n    }\n\n    // Draggable support. This is always on, except for with placeholders.\n    if (this.props.isDraggable) {\n      child = this.mixinDraggable(child, pos);\n    }\n\n    return child;\n  }\n});\n\nfunction constraintError(name, props) {\n  delete props.children;\n  throw new Error(name + ' overrides contraints on gridItem ' + props.i + '. Full props: ' + JSON.stringify(props));\n}\n\nmodule.exports = GridItem;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/GridItem.jsx\n **/","'use strict';\nvar React = require('react');\nvar utils = require('./utils');\nvar responsiveUtils = require('./responsiveUtils');\nvar PureDeepRenderMixin = require('./mixins/PureDeepRenderMixin');\nvar WidthListeningMixin = require('./mixins/WidthListeningMixin');\nvar ReactGridLayout = require('./ReactGridLayout');\n\n/**\n * A wrapper around ReactGridLayout to support responsive breakpoints.\n */\nvar ResponsiveReactGridLayout = React.createClass({\n  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\n  propTypes: {\n    //\n    // Basic props\n    //\n\n    // Optional, but if you are managing width yourself you may want to set the breakpoint\n    // yourself as well.\n    breakpoint: React.PropTypes.string,\n\n    // {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}\n    breakpoints: React.PropTypes.object,\n\n    // # of cols. This is a breakpoint -> cols map\n    cols: React.PropTypes.object,\n\n    // layouts is an object mapping breakpoints to layouts.\n    // e.g. {lg: Layout, md: Layout, ...}\n    layouts: function(props, propName, componentName) {\n      React.PropTypes.object.isRequired.apply(this, arguments);\n\n      var layouts = props.layouts;\n      Object.keys(layouts).map(function(k) {\n        utils.validateLayout(layouts[k], 'layouts.' + k);\n      });\n    },\n\n    //\n    // Callbacks\n    //\n\n    // Calls back with breakpoint and new # cols\n    onBreakpointChange: React.PropTypes.func,\n\n    // Callback so you can save the layout.\n    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n    onLayoutChange: React.PropTypes.func\n  },\n\n  getDefaultProps() {\n    return {\n      breakpoints: {lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0},\n      cols: {lg: 12, md: 10, sm: 6, xs: 4, xxs: 2},\n      layouts: {},\n      onBreakpointChange: function(){},\n      onLayoutChange: function(){}\n    };\n  },\n\n  getInitialState() {\n    var breakpoint = this.props.breakpoint ||\n      responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, this.props.initialWidth);\n    var cols = responsiveUtils.getColsFromBreakpoint(breakpoint, this.props.cols);\n\n    // Get the initial layout. This can tricky; we try to generate one however possible if one doesn't exist\n    // for this layout.\n    var initialLayout = responsiveUtils.findOrGenerateResponsiveLayout(\n      this.props.layouts, this.props.breakpoints, breakpoint, breakpoint, cols, this.props.verticalCompact);\n\n    return {\n      layout: initialLayout,\n      // storage for layouts obsoleted by breakpoints\n      layouts: this.props.layouts || {},\n      breakpoint: breakpoint,\n      cols: cols,\n      width: this.props.initialWidth\n    };\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // This allows you to set the width manually if you like.\n    // Use manual width changes in combination with `listenToWindowResize: false`\n    if (nextProps.width) this.onWidthChange(nextProps.width);\n\n    // Allow parent to set breakpoint directly.\n    if (nextProps.breakpoint !== this.props.breakpoint) {\n      this.onWidthChange(this.state.width);\n    }\n\n    // Allow parent to set layouts directly.\n    if (nextProps.layouts && nextProps.layouts !== this.state.layouts) {\n      // Since we're setting an entirely new layout object, we must generate a new responsive layout\n      // if one does not exist.\n      var newLayout = responsiveUtils.findOrGenerateResponsiveLayout(\n        nextProps.layouts, nextProps.breakpoints, this.state.breakpoint, this.state.breakpoint, this.state.cols, this.props.verticalLayout);\n\n      this.setState({\n        layouts: nextProps.layouts,\n        layout: newLayout\n      });\n    }\n  },\n\n  /**\n   * Bubble this up, add `layouts` object.\n   * @param  {Array} layout Layout from inner Grid.\n   */\n  onLayoutChange(layout) {\n    this.state.layouts[this.state.breakpoint] = layout;\n    this.setState({layout: layout, layouts: this.state.layouts});\n    this.props.onLayoutChange(layout, this.state.layouts);\n  },\n\n  /**\n   * When the width changes work through breakpoints and reset state with the new width & breakpoint.\n   * Width changes are necessary to figure out the widget widths.\n   */\n  onWidthChange(width) {\n    // Set new breakpoint\n    var newState = {width: width};\n    newState.breakpoint = this.props.breakpoint ||\n      responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, newState.width);\n    newState.cols = responsiveUtils.getColsFromBreakpoint(newState.breakpoint, this.props.cols);\n\n    // Breakpoint change\n    if (newState.cols !== this.state.cols) {\n\n      // Store the current layout\n      newState.layouts = this.state.layouts;\n      newState.layouts[this.state.breakpoint] = JSON.parse(JSON.stringify(this.state.layout));\n\n      // Find or generate a new one.\n      newState.layout = responsiveUtils.findOrGenerateResponsiveLayout(\n        newState.layouts, this.props.breakpoints, newState.breakpoint, this.state.breakpoint, newState.cols, this.props.verticalLayout);\n\n      // This adds missing items.\n      newState.layout = utils.synchronizeLayoutWithChildren(newState.layout, this.props.children, newState.cols, this.props.verticalCompact);\n\n      // Store this new layout as well.\n      newState.layouts[newState.breakpoint] = newState.layout;\n\n      this.props.onBreakpointChange(newState.breakpoint, newState.cols);\n    }\n\n    this.setState(newState);\n  },\n\n\n  render() {\n    // Don't pass responsive props to RGL.\n    /*jshint unused:false*/\n    var {layouts, onBreakpointChange, breakpoints, ...props} = this.props;\n    return (\n      <ReactGridLayout {...props}\n          layout={this.state.layout}\n          cols={this.state.cols}\n          listenToWindowResize={false}\n          onLayoutChange={this.onLayoutChange}\n          width={this.state.width}>\n        {this.props.children}\n      </ReactGridLayout>\n    );\n  }\n});\n\nmodule.exports = ResponsiveReactGridLayout;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/ResponsiveReactGridLayout.jsx\n **/","'use strict';\n\nvar utils = require('./utils');\n\nvar responsiveUtils = module.exports = {\n\n  /**\n   * Given a width, find the highest breakpoint that matches is valid for it (width > breakpoint).\n   *\n   * @param  {Object} breakpoints Breakpoints object (e.g. {lg: 1200, md: 960, ...})\n   * @param  {Number} width Screen width.\n   * @return {String}       Highest breakpoint that is less than width.\n   */\n  getBreakpointFromWidth(breakpoints, width) {\n    var sorted = responsiveUtils.sortBreakpoints(breakpoints);\n    var matching = sorted[0];\n    for (var i = 1, len = sorted.length; i < len; i++) {\n      var breakpointName = sorted[i];\n      if (width > breakpoints[breakpointName]) matching = breakpointName;\n    }\n    return matching;\n  },\n\n\n  /**\n   * Given a breakpoint, get the # of cols set for it.\n   * @param  {String} breakpoint Breakpoint name.\n   * @param  {Object} cols       Map of breakpoints to cols.\n   * @return {Number}            Number of cols.\n   */\n  getColsFromBreakpoint(breakpoint, cols) {\n    if (!cols[breakpoint]) {\n      throw new Error(\"ResponsiveReactGridLayout: `cols` entry for breakpoint \" + breakpoint + \" is missing!\");\n    }\n    return cols[breakpoint];\n  },\n\n  /**\n   * Given existing layouts and a new breakpoint, find or generate a new layout.\n   *\n   * This finds the layout above the new one and generates from it, if it exists.\n   *\n   * @param  {Array} layouts     Existing layouts.\n   * @param  {Array} breakpoints All breakpoints.\n   * @param  {String} breakpoint New breakpoint.\n   * @param  {String} breakpoint Last breakpoint (for fallback).\n   * @param  {Number} cols       Column count at new breakpoint.\n   * @param  {Boolean} verticalCompact Whether or not to compact the layout\n   *   vertically.\n   * @return {Array}             New layout.\n   */\n  findOrGenerateResponsiveLayout(layouts, breakpoints, breakpoint, lastBreakpoint, cols, verticalCompact) {\n    // If it already exists, just return it.\n    if (layouts[breakpoint]) return layouts[breakpoint];\n    // Find or generate the next layout\n    var layout = layouts[lastBreakpoint];\n    var breakpointsSorted = responsiveUtils.sortBreakpoints(breakpoints);\n    var breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));\n    for (var i = 0, len = breakpointsAbove.length; i < len; i++) {\n      var b = breakpointsAbove[i];\n      if (layouts[b]) {\n        layout = layouts[b];\n        break;\n      }\n    }\n    layout = JSON.parse(JSON.stringify(layout || [])); // clone layout so we don't modify existing items\n    return utils.compact(utils.correctBounds(layout, {cols: cols}), verticalCompact);\n  },\n\n\n  /**\n   * Given breakpoints, return an array of breakpoints sorted by width. This is usually\n   * e.g. ['xxs', 'xs', 'sm', ...]\n   *\n   * @param  {Object} breakpoints Key/value pair of breakpoint names to widths.\n   * @return {Array}              Sorted breakpoints.\n   */\n  sortBreakpoints(breakpoints) {\n    var keys = Object.keys(breakpoints);\n    return keys.sort(function(a, b) {\n      return breakpoints[a] - breakpoints[b];\n    });\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/responsiveUtils.js\n **/","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deep-equal/index.js\n ** module id = 13\n ** module chunks = 0\n **/","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deep-equal/lib/is_arguments.js\n ** module id = 14\n ** module chunks = 0\n **/","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deep-equal/lib/keys.js\n ** module id = 15\n ** module chunks = 0\n **/","'use strict';\n\nvar React = require('react');\nvar emptyFunction = function(){};\nvar assign = require('object-assign');\nvar classNames = require('classnames');\nvar browserPrefix = require('./getPrefix')();\n\n//\n// Helpers. See Element definition below this section.\n//\n\nfunction createUIEvent(draggable) {\n  // State changes are often (but not always!) async. We want the latest value.\n  var state = draggable._pendingState || draggable.state;\n  return {\n    node: draggable.getDOMNode(),\n    position: {\n      top: state.clientY,\n      left: state.clientX\n    }\n  };\n}\n\nfunction canDragX(draggable) {\n  return draggable.props.axis === 'both' || draggable.props.axis === 'x';\n}\n\nfunction canDragY(draggable) {\n  return draggable.props.axis === 'both' || draggable.props.axis === 'y';\n}\n\nfunction isFunction(func) {\n  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n}\n\n// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\nfunction findInArray(array, callback) {\n  for (var i = 0, length = array.length; i < length; i++) {\n    if (callback.apply(callback, [array[i], i, array])) return array[i];\n  }\n}\n\nvar matchesSelectorFunc = '';\nfunction matchesSelector(el, selector) {\n  if (!matchesSelectorFunc) {\n    matchesSelectorFunc = findInArray([\n      'matches',\n      'webkitMatchesSelector',\n      'mozMatchesSelector',\n      'msMatchesSelector',\n      'oMatchesSelector'\n    ], function(method){\n      return isFunction(el[method]);\n    });\n  }\n\n  return el[matchesSelectorFunc].call(el, selector);\n}\n\n/**\n * simple abstraction for dragging events names\n * */\nvar eventsFor = {\n  touch: {\n    start: 'touchstart',\n    move: 'touchmove',\n    end: 'touchend'\n  },\n  mouse: {\n    start: 'mousedown',\n    move: 'mousemove',\n    end: 'mouseup'\n  }\n};\n\n// Default to mouse events\nvar dragEventFor = eventsFor.mouse;\n\n/**\n * get {clientX, clientY} positions of control\n * */\nfunction getControlPosition(e) {\n  var position = (e.targetTouches && e.targetTouches[0]) || e;\n  return {\n    clientX: position.clientX,\n    clientY: position.clientY\n  };\n}\n\nfunction addEvent(el, event, handler) {\n  if (!el) { return; }\n  if (el.attachEvent) {\n    el.attachEvent('on' + event, handler);\n  } else if (el.addEventListener) {\n    el.addEventListener(event, handler, true);\n  } else {\n    el['on' + event] = handler;\n  }\n}\n\nfunction removeEvent(el, event, handler) {\n  if (!el) { return; }\n  if (el.detachEvent) {\n    el.detachEvent('on' + event, handler);\n  } else if (el.removeEventListener) {\n    el.removeEventListener(event, handler, true);\n  } else {\n    el['on' + event] = null;\n  }\n}\n\nfunction outerHeight(node) {\n  // This is deliberately excluding margin for our calculations, since we are using\n  // offsetTop which is including margin. See getBoundPosition\n  var height = node.clientHeight;\n  var computedStyle = window.getComputedStyle(node);\n  height += int(computedStyle.borderTopWidth);\n  height += int(computedStyle.borderBottomWidth);\n  return height;\n}\n\nfunction outerWidth(node) {\n  // This is deliberately excluding margin for our calculations, since we are using\n  // offsetLeft which is including margin. See getBoundPosition\n  var width = node.clientWidth;\n  var computedStyle = window.getComputedStyle(node);\n  width += int(computedStyle.borderLeftWidth);\n  width += int(computedStyle.borderRightWidth);\n  return width;\n}\nfunction innerHeight(node) {\n  var height = node.clientHeight;\n  var computedStyle = window.getComputedStyle(node);\n  height -= int(computedStyle.paddingTop);\n  height -= int(computedStyle.paddingBottom);\n  return height;\n}\n\nfunction innerWidth(node) {\n  var width = node.clientWidth;\n  var computedStyle = window.getComputedStyle(node);\n  width -= int(computedStyle.paddingLeft);\n  width -= int(computedStyle.paddingRight);\n  return width;\n}\n\nfunction isNum(num) {\n  return typeof num === 'number' && !isNaN(num);\n}\n\nfunction int(a) {\n  return parseInt(a, 10);\n}\n\nfunction getBoundPosition(draggable, clientX, clientY) {\n  var bounds = JSON.parse(JSON.stringify(draggable.props.bounds));\n  var node = draggable.getDOMNode();\n  var parent = node.parentNode;\n\n  if (bounds === 'parent') {\n    var nodeStyle = window.getComputedStyle(node);\n    var parentStyle = window.getComputedStyle(parent);\n    // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.\n    bounds = {\n      left: -node.offsetLeft + int(parentStyle.paddingLeft) +\n            int(nodeStyle.borderLeftWidth) + int(nodeStyle.marginLeft),\n      top: -node.offsetTop + int(parentStyle.paddingTop) +\n            int(nodeStyle.borderTopWidth) + int(nodeStyle.marginTop),\n      right: innerWidth(parent) - outerWidth(node) - node.offsetLeft,\n      bottom: innerHeight(parent) - outerHeight(node) - node.offsetTop\n    };\n  }\n\n  // Keep x and y below right and bottom limits...\n  if (isNum(bounds.right)) clientX = Math.min(clientX, bounds.right);\n  if (isNum(bounds.bottom)) clientY = Math.min(clientY, bounds.bottom);\n\n  // But above left and top limits.\n  if (isNum(bounds.left)) clientX = Math.max(clientX, bounds.left);\n  if (isNum(bounds.top)) clientY = Math.max(clientY, bounds.top);\n\n  return [clientX, clientY];\n}\n\nfunction snapToGrid(grid, pendingX, pendingY) {\n  var x = Math.round(pendingX / grid[0]) * grid[0];\n  var y = Math.round(pendingY / grid[1]) * grid[1];\n  return [x, y];\n}\n\n// Useful for preventing blue highlights all over everything when dragging.\nvar userSelectStyle = ';user-select: none;';\nif (browserPrefix) {\n  userSelectStyle += '-' + browserPrefix.toLowerCase() + '-user-select: none;';\n}\n\nfunction addUserSelectStyles(draggable) {\n  if (!draggable.props.enableUserSelectHack) return;\n  var style = document.body.getAttribute('style') || '';\n  document.body.setAttribute('style', style + userSelectStyle);\n}\n\nfunction removeUserSelectStyles(draggable) {\n  if (!draggable.props.enableUserSelectHack) return;\n  var style = document.body.getAttribute('style') || '';\n  document.body.setAttribute('style', style.replace(userSelectStyle, ''));\n}\n\nfunction createCSSTransform(style) {\n  // Replace unitless items with px\n  var x = style.x + 'px';\n  var y = style.y + 'px';\n  var out = {transform: 'translate(' + x + ',' + y + ')'};\n  // Add single prefixed property as well\n  if (browserPrefix) {\n    out[browserPrefix + 'Transform'] = out.transform;\n  }\n  return out;\n}\n\nfunction createSVGTransform(args) {\n  return 'translate(' + args.x + ',' + args.y + ')';\n}\n\n//\n// End Helpers.\n//\n\n//\n// Define <Draggable>\n//\n\nmodule.exports = React.createClass({\n  displayName: 'Draggable',\n\n  propTypes: {\n    /**\n     * `axis` determines which axis the draggable can move.\n     *\n     * 'both' allows movement horizontally and vertically.\n     * 'x' limits movement to horizontal axis.\n     * 'y' limits movement to vertical axis.\n     *\n     * Defaults to 'both'.\n     */\n    axis: React.PropTypes.oneOf(['both', 'x', 'y']),\n\n    /**\n     * `bounds` determines the range of movement available to the element.\n     * Available values are:\n     *\n     * 'parent' restricts movement within the Draggable's parent node.\n     *\n     * Alternatively, pass an object with the following properties, all of which are optional:\n     *\n     * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}\n     *\n     * All values are in px.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   var App = React.createClass({\n     *       render: function () {\n     *         return (\n     *            <Draggable bounds={{right: 300, bottom: 300}}>\n     *              <div>Content</div>\n     *           </Draggable>\n     *         );\n     *       }\n     *   });\n     * ```\n     */\n    bounds: React.PropTypes.oneOfType([\n      React.PropTypes.shape({\n        left: React.PropTypes.Number,\n        right: React.PropTypes.Number,\n        top: React.PropTypes.Number,\n        bottom: React.PropTypes.Number\n      }),\n      React.PropTypes.oneOf(['parent', false])\n    ]),\n\n    /**\n     * By default, we add 'user-select:none' attributes to the document body\n     * to prevent ugly text selection during drag. If this is causing problems\n     * for your app, set this to `false`.\n     */\n    enableUserSelectHack: React.PropTypes.bool,\n\n    /**\n     * `handle` specifies a selector to be used as the handle that initiates drag.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   var App = React.createClass({\n     *       render: function () {\n     *         return (\n     *            <Draggable handle=\".handle\">\n     *              <div>\n     *                  <div className=\"handle\">Click me to drag</div>\n     *                  <div>This is some other content</div>\n     *              </div>\n     *           </Draggable>\n     *         );\n     *       }\n     *   });\n     * ```\n     */\n    handle: React.PropTypes.string,\n\n    /**\n     * `cancel` specifies a selector to be used to prevent drag initialization.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   var App = React.createClass({\n     *       render: function () {\n     *           return(\n     *               <Draggable cancel=\".cancel\">\n     *                   <div>\n     *                     <div className=\"cancel\">You can't drag from here</div>\n     *            <div>Dragging here works fine</div>\n     *                   </div>\n     *               </Draggable>\n     *           );\n     *       }\n     *   });\n     * ```\n     */\n    cancel: React.PropTypes.string,\n\n    /**\n     * `grid` specifies the x and y that dragging should snap to.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   var App = React.createClass({\n     *       render: function () {\n     *           return (\n     *               <Draggable grid={[25, 25]}>\n     *                   <div>I snap to a 25 x 25 grid</div>\n     *               </Draggable>\n     *           );\n     *       }\n     *   });\n     * ```\n     */\n    grid: React.PropTypes.arrayOf(React.PropTypes.number),\n\n    /**\n     * `start` specifies the x and y that the dragged item should start at\n     *\n     * Example:\n     *\n     * ```jsx\n     *      var App = React.createClass({\n     *          render: function () {\n     *              return (\n     *                  <Draggable start={{x: 25, y: 25}}>\n     *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n     *                  </Draggable>\n     *              );\n     *          }\n     *      });\n     * ```\n     */\n    start: React.PropTypes.shape({\n      x: React.PropTypes.number,\n      y: React.PropTypes.number\n    }),\n\n    /**\n     * `moveOnStartChange`, if true (default false) will move the element if the `start`\n     * property changes.\n     */\n    moveOnStartChange: React.PropTypes.bool,\n\n\n    /**\n     * `zIndex` specifies the zIndex to use while dragging.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   var App = React.createClass({\n     *       render: function () {\n     *           return (\n     *               <Draggable zIndex={100}>\n     *                   <div>I have a zIndex</div>\n     *               </Draggable>\n     *           );\n     *       }\n     *   });\n     * ```\n     */\n    zIndex: React.PropTypes.number,\n\n    /**\n     * Called when dragging starts.\n     * If this function returns the boolean false, dragging will be canceled.\n     *\n     * Example:\n     *\n     * ```js\n     *  function (event, ui) {}\n     * ```\n     *\n     * `event` is the Event that was triggered.\n     * `ui` is an object:\n     *\n     * ```js\n     *  {\n     *    position: {top: 0, left: 0}\n     *  }\n     * ```\n     */\n    onStart: React.PropTypes.func,\n\n    /**\n     * Called while dragging.\n     * If this function returns the boolean false, dragging will be canceled.\n     *\n     * Example:\n     *\n     * ```js\n     *  function (event, ui) {}\n     * ```\n     *\n     * `event` is the Event that was triggered.\n     * `ui` is an object:\n     *\n     * ```js\n     *  {\n     *    position: {top: 0, left: 0}\n     *  }\n     * ```\n     */\n    onDrag: React.PropTypes.func,\n\n    /**\n     * Called when dragging stops.\n     *\n     * Example:\n     *\n     * ```js\n     *  function (event, ui) {}\n     * ```\n     *\n     * `event` is the Event that was triggered.\n     * `ui` is an object:\n     *\n     * ```js\n     *  {\n     *    position: {top: 0, left: 0}\n     *  }\n     * ```\n     */\n    onStop: React.PropTypes.func,\n\n    /**\n     * A workaround option which can be passed if onMouseDown needs to be accessed,\n     * since it'll always be blocked (due to that there's internal use of onMouseDown)\n     */\n    onMouseDown: React.PropTypes.func,\n  },\n\n  componentWillReceiveProps: function(newProps) {\n    // React to changes in the 'start' param.\n    if (newProps.moveOnStartChange && newProps.start) {\n      this.setState(this.getInitialState(newProps));\n    }\n  },\n\n  componentDidMount: function() {\n    // Check to see if the element passed is an instanceof SVGElement\n    if( React.findDOMNode(this) instanceof SVGElement) {\n        this.setState({ isElementSVG: true });\n    }\n  },\n\n  componentWillUnmount: function() {\n    // Remove any leftover event handlers\n    removeEvent(document, dragEventFor.move, this.handleDrag);\n    removeEvent(document, dragEventFor.end, this.handleDragEnd);\n    removeUserSelectStyles(this);\n  },\n\n  getDefaultProps: function () {\n    return {\n      axis: 'both',\n      bounds: false,\n      handle: null,\n      cancel: null,\n      grid: null,\n      moveOnStartChange: false,\n      start: {x: 0, y: 0},\n      zIndex: NaN,\n      enableUserSelectHack: true,\n      onStart: emptyFunction,\n      onDrag: emptyFunction,\n      onStop: emptyFunction,\n      onMouseDown: emptyFunction\n    };\n  },\n\n  getInitialState: function (props) {\n    // Handle call from CWRP\n    var currentState = this.state;\n    props = props || this.props;\n    return {\n      // Whether or not we are currently dragging.\n      dragging: false,\n\n      // Offset between start top/left and mouse top/left while dragging.\n      offsetX: 0, offsetY: 0,\n\n      // Current transform x and y.\n      clientX: props.start.x, clientY: props.start.y,\n\n      // Determines if the element is an svg or not. Default to false.\n      isElementSVG: currentState && currentState.isElementSVG !== undefined ?\n        currentState.isElementSVG :\n        false\n    };\n  },\n\n  handleDragStart: function (e) {\n    // Set touch identifier in component state if this is a touch event\n    if(e.targetTouches){\n      this.setState({touchIdentifier: e.targetTouches[0].identifier});\n    }\n\n    // Make it possible to attach event handlers on top of this one\n    this.props.onMouseDown(e);\n\n    // Short circuit if handle or cancel prop was provided and selector doesn't match\n    if ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||\n      (this.props.cancel && matchesSelector(e.target, this.props.cancel))) {\n      return;\n    }\n\n    // Call event handler. If it returns explicit false, cancel.\n    var shouldStart = this.props.onStart(e, createUIEvent(this));\n    if (shouldStart === false) return;\n\n    var dragPoint = getControlPosition(e);\n\n    // Add a style to the body to disable user-select. This prevents text from\n    // being selected all over the page.\n    addUserSelectStyles(this);\n\n    // Initiate dragging. Set the current x and y as offsets\n    // so we know how much we've moved during the drag. This allows us\n    // to drag elements around even if they have been moved, without issue.\n    this.setState({\n      dragging: true,\n      offsetX: dragPoint.clientX - this.state.clientX,\n      offsetY: dragPoint.clientY - this.state.clientY,\n      scrollX: document.body.scrollLeft,\n      scrollY: document.body.scrollTop\n    });\n\n\n    // Add event handlers\n    addEvent(document, 'scroll', this.handleScroll);\n    addEvent(document, dragEventFor.move, this.handleDrag);\n    addEvent(document, dragEventFor.end, this.handleDragEnd);\n  },\n\n  handleDragEnd: function (e) {\n    // Short circuit if not currently dragging\n    if (!this.state.dragging) {\n      return;\n    }\n\n    // Short circuit if this is not the correct touch event\n    if(e.changedTouches && (e.changedTouches[0].identifier != this.state.touchIdentifier)){\n     return;\n    }\n\n    removeUserSelectStyles(this);\n\n    // Turn off dragging\n    this.setState({\n      dragging: false\n    });\n\n    // Call event handler\n    this.props.onStop(e, createUIEvent(this));\n\n    // Remove event handlers\n    removeEvent(document, 'scroll', this.handleScroll);\n    removeEvent(document, dragEventFor.move, this.handleDrag);\n    removeEvent(document, dragEventFor.end, this.handleDragEnd);\n  },\n\n  handleDrag: function (e) {\n    // Return if this is a touch event, but not the correct one for this element\n    if(e.targetTouches && (e.targetTouches[0].identifier != this.state.touchIdentifier)){\n      return;\n    }\n    var dragPoint = getControlPosition(e);\n\n    // Calculate X and Y\n    var clientX = dragPoint.clientX - this.state.offsetX;\n    var clientY = dragPoint.clientY - this.state.offsetY;\n\n    // Snap to grid if prop has been provided\n    if (Array.isArray(this.props.grid)) {\n      var coords = snapToGrid(this.props.grid, clientX, clientY);\n      clientX = coords[0];\n      clientY = coords[1];\n    }\n\n    if (this.props.bounds) {\n      var pos = getBoundPosition(this, clientX, clientY);\n      clientX = pos[0];\n      clientY = pos[1];\n    }\n\n    // Call event handler. If it returns explicit false, cancel.\n    var shouldUpdate = this.props.onDrag(e, createUIEvent(this));\n    if (shouldUpdate === false) return this.handleDragEnd({});\n\n    // Update transform\n    this.setState({\n      clientX: clientX,\n      clientY: clientY\n    });\n  },\n\n  handleScroll: function(e) {\n    var s = this.state, x = document.body.scrollLeft, y = document.body.scrollTop;\n    var offsetX = x - s.scrollX, offsetY = y - s.scrollY;\n    this.setState({\n      scrollX: x,\n      scrollY: y,\n      clientX: s.clientX + offsetX,\n      clientY: s.clientY + offsetY,\n      offsetX: s.offsetX - offsetX,\n      offsetY: s.offsetY - offsetY\n    });\n  },\n\n  onMouseDown: function(ev) {\n    // Prevent 'ghost click' which happens 300ms after touchstart if the event isn't cancelled.\n    // We don't cancel the event on touchstart because of #37; we might want to make a scrollable item draggable.\n    // More on ghost clicks: http://ariatemplates.com/blog/2014/05/ghost-clicks-in-mobile-browsers/\n    if (dragEventFor === eventsFor.touch) {\n      return ev.preventDefault();\n    }\n\n    return this.handleDragStart.apply(this, arguments);\n  },\n\n  onTouchStart: function(ev) {\n    // We're on a touch device now, so change the event handlers\n    dragEventFor = eventsFor.touch;\n\n    return this.handleDragStart.apply(this, arguments);\n  },\n\n  // Intended for use by a parent component. Resets internal state on this component. Useful for\n  // <Resizable> and other components in case this element is manually resized and start/moveOnStartChange\n  // don't work for you.\n  resetState: function() {\n    this.setState({\n      offsetX: 0, offsetY: 0, clientX: 0, clientY: 0\n    });\n  },\n\n  render: function () {\n    // Create style object. We extend from existing styles so we don't\n    // remove anything already set (like background, color, etc).\n    var childStyle = this.props.children.props.style || {};\n\n    // Add a CSS transform to move the element around. This allows us to move the element around\n    // without worrying about whether or not it is relatively or absolutely positioned.\n    // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>\n    // has a clean slate.\n    var transform = this.state.isElementSVG ? null :\n      createCSSTransform({\n          // Set left if horizontal drag is enabled\n          x: canDragX(this) ?\n            this.state.clientX :\n            this.props.start.x,\n\n          // Set top if vertical drag is enabled\n          y: canDragY(this) ?\n            this.state.clientY :\n            this.props.start.y\n        });\n\n\n    // This is primarily for IE as it ignores the CSS transform applied above\n    // and only respects the real transform attribute.\n    var svgTransform = !this.state.isElementSVG ? null :\n        createSVGTransform({\n          // Set left if horizontal drag is enabled\n          x: canDragX(this) ?\n            this.state.clientX :\n            this.props.start.x,\n\n          // Set top if vertical drag is enabled\n          y: canDragY(this) ?\n            this.state.clientY :\n            this.props.start.y\n        });\n\n\n    // Workaround IE pointer events; see #51\n    // https://github.com/mzabriskie/react-draggable/issues/51#issuecomment-103488278\n    var touchHacks = {\n      touchAction: 'none'\n    };\n\n    var style = assign({}, childStyle, transform, touchHacks);\n\n    // Set zIndex if currently dragging and prop has been provided\n    if (this.state.dragging && !isNaN(this.props.zIndex)) {\n      style.zIndex = this.props.zIndex;\n    }\n\n    var className = classNames((this.props.children.props.className || ''), 'react-draggable', {\n      'react-draggable-dragging': this.state.dragging,\n      'react-draggable-dragged': this.state.dragged\n    });\n\n    // Reuse the child provided\n    // This makes it flexible to use whatever element is wanted (div, ul, etc)\n    return React.cloneElement(React.Children.only(this.props.children), {\n      style: style,\n      transform: svgTransform,\n      className: className,\n\n      onMouseDown: this.onMouseDown,\n      onTouchStart: this.onTouchStart,\n      onMouseUp: this.handleDragEnd,\n      onTouchEnd: this.handleDragEnd\n    });\n  }\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-draggable/lib/draggable.js\n ** module id = 16\n ** module chunks = 0\n **/","module.exports = function() {\n  if (typeof window === 'undefined') return '';\n  // Thanks David Walsh\n  var styles = window.getComputedStyle(document.documentElement, ''),\n  pre = (Array.prototype.slice\n        .call(styles)\n        .join('')\n        .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])\n      )[1];\n  // 'ms' is not titlecased\n  if(pre === undefined || pre === null) return '';\n  if (pre === 'ms') return pre;\n  return pre.slice(0, 1).toUpperCase() + pre.slice(1);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-draggable/lib/getPrefix.js\n ** module id = 17\n ** module chunks = 0\n **/","/*!\n  Copyright (c) 2015 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = '';\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses += ' ' + arg;\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses += ' ' + classNames.apply(null, arg);\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses += ' ' + key;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.substr(1);\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-draggable/~/classnames/index.js\n ** module id = 18\n ** module chunks = 0\n **/","/* eslint-disable no-unused-vars */\n'use strict';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nmodule.exports = Object.assign || function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (Object.getOwnPropertySymbols) {\n\t\t\tsymbols = Object.getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-draggable/~/object-assign/index.js\n ** module id = 19\n ** module chunks = 0\n **/","'use strict';\n\nvar _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };\n\nvar _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar React = require('react');\nvar Resizable = require('./Resizable');\nvar PureRenderMixin = require('react/lib/ReactComponentWithPureRenderMixin');\n\n// An example use of Resizable.\nvar ResizableBox = module.exports = React.createClass({\n  displayName: 'ResizableBox',\n  mixins: [PureRenderMixin],\n\n  propTypes: {\n    lockAspectRatio: React.PropTypes.bool\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      lockAspectRatio: false,\n      handleSize: [20, 20]\n    };\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      width: this.props.width,\n      height: this.props.height,\n      aspectRatio: this.props.width / this.props.height\n    };\n  },\n\n  onResize: function onResize(event, _ref) {\n    var _this = this;\n\n    var element = _ref.element;\n    var size = _ref.size;\n    var width = size.width;\n    var height = size.height;\n\n    var widthChanged = width !== this.state.width,\n        heightChanged = height !== this.state.height;\n    if (!widthChanged && !heightChanged) {\n      return;\n    }if (this.props.lockAspectRatio) {\n      var _preserveAspectRatio = this.preserveAspectRatio(width, height);\n\n      var _preserveAspectRatio2 = _slicedToArray(_preserveAspectRatio, 2);\n\n      width = _preserveAspectRatio2[0];\n      height = _preserveAspectRatio2[1];\n    }\n\n    this.setState({ width: width, height: height }, function () {\n      if (_this.props.onResize) {\n        _this.props.onResize(event, { element: element, size: { width: width, height: height } });\n      }\n    });\n  },\n\n  // If you do this, be careful of constraints\n  preserveAspectRatio: function preserveAspectRatio(width, height) {\n    var min = this.props.minConstraints;\n    var max = this.props.maxConstraints;\n\n    height = width / this.state.aspectRatio;\n    width = height * this.state.aspectRatio;\n\n    if (min) {\n      width = Math.max(min[0], width);\n      height = Math.max(min[1], height);\n    }\n    if (max) {\n      width = Math.min(max[0], width);\n      height = Math.min(max[1], height);\n    }\n    return [width, height];\n  },\n\n  render: function render() {\n    // Basic wrapper around a Resizable instance.\n    // If you use Resizable directly, you are responsible for updating the component\n    // with a new width and height.\n    var _props = this.props;\n    var handleSize = _props.handleSize;\n    var minConstraints = _props.minConstraints;\n    var maxConstraints = _props.maxConstraints;\n\n    var props = _objectWithoutProperties(_props, ['handleSize', 'minConstraints', 'maxConstraints']);\n\n    return React.createElement(\n      Resizable,\n      {\n        minConstraints: minConstraints,\n        maxConstraints: maxConstraints,\n        handleSize: handleSize,\n        width: this.state.width,\n        height: this.state.height,\n        onResizeStart: this.props.onResizeStart,\n        onResize: this.onResize,\n        onResizeStop: this.props.onResizeStop,\n        draggableOpts: this.props.draggableOpts\n      },\n      React.createElement(\n        'div',\n        _extends({ style: { width: this.state.width + 'px', height: this.state.height + 'px' } }, props),\n        this.props.children\n      )\n    );\n  }\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-resizable/build/ResizableBox.js\n ** module id = 20\n ** module chunks = 0\n **/","'use strict';\n\nvar assign = require('object-assign');\nvar React = require('react');\n\nmodule.exports = function cloneElement(element, props) {\n  if (props.style && element.props.style) {\n    props.style = assign({}, element.props.style, props.style);\n  }\n  if (props.className && element.props.className) {\n    props.className = element.props.className + ' ' + props.className;\n  }\n  return React.cloneElement(element, props);\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-resizable/build/cloneElement.js\n ** module id = 21\n ** module chunks = 0\n **/","'use strict';\nmodule.exports = function() {\n  throw new Error(\"Don't instantiate Resizable directly! Use require('react-resizable').Resizable\");\n};\n\nmodule.exports.Resizable = require('./build/Resizable');\nmodule.exports.ResizableBox = require('./build/ResizableBox');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-resizable/index.js\n ** module id = 22\n ** module chunks = 0\n **/","'use strict';\r\nvar React    = require('react')\r\n  , hasOwn   = Object.prototype.hasOwnProperty\r\n  , version  = React.version.split('.').map(parseFloat)\r\n  , RESERVED = {\r\n      className:  resolve(joinClasses),\r\n      children:   function(){},\r\n      key:        function(){},\r\n      ref:        function(){},\r\n      style:      resolve(extend)\r\n    };\r\n\r\nmodule.exports = function cloneWithProps(child, props) {\r\n  var newProps = mergeProps(props, child.props);\r\n\r\n  if (!hasOwn.call(newProps, 'children') && hasOwn.call(child.props, 'children'))\r\n    newProps.children = child.props.children;\r\n\r\n  // < 0.11\r\n  if (version[0] === 0 && version[1] < 11)\r\n    return child.constructor.ConvenienceConstructor(newProps);\r\n  \r\n  // 0.11\r\n  if (version[0] === 0 && version[1] === 11)\r\n    return child.constructor(newProps);\r\n\r\n  // 0.12\r\n  else if (version[0] === 0 && version[1] === 12){\r\n    MockLegacyFactory.isReactLegacyFactory = true\r\n    MockLegacyFactory.type = child.type\r\n    return React.createElement(MockLegacyFactory, newProps);\r\n  }\r\n\r\n  // 0.13+\r\n  return React.createElement(child.type, newProps);\r\n\r\n  function MockLegacyFactory(){}\r\n}\r\n\r\nfunction mergeProps(currentProps, childProps) {\r\n  var newProps = extend(currentProps), key\r\n\r\n  for (key in childProps) {\r\n    if (hasOwn.call(RESERVED, key) )\r\n      RESERVED[key](newProps, childProps[key], key)\r\n\r\n    else if ( !hasOwn.call(newProps, key) )\r\n      newProps[key] = childProps[key];\r\n  }\r\n  return newProps\r\n}\r\n\r\nfunction resolve(fn){\r\n  return function(src, value, key){\r\n    if( !hasOwn.call(src, key)) src[key] = value\r\n    else src[key] = fn(src[key], value)\r\n  }\r\n}\r\n\r\nfunction joinClasses(a, b){\r\n  if ( !a ) return b || ''\r\n  return a + (b ? ' ' + b : '')\r\n}\r\n\r\nfunction extend() {\r\n  var target = {};\r\n  for (var i = 0; i < arguments.length; i++) \r\n    for (var key in arguments[i]) if (hasOwn.call(arguments[i], key)) \r\n      target[key] = arguments[i][key]   \r\n  return target\r\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/cloneWithProps.js\n ** module id = 23\n ** module chunks = 0\n **/","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule shallowEqual\n */\n\n'use strict';\n\n/**\n * Performs equality by iterating through keys on an object and returning\n * false when any key has values which are not strictly equal between\n * objA and objB. Returns true when the values of all keys are strictly equal.\n *\n * @return {boolean}\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n  var key;\n  // Test for A's keys different from B.\n  for (key in objA) {\n    if (objA.hasOwnProperty(key) &&\n        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {\n      return false;\n    }\n  }\n  // Test for B's keys missing from A.\n  for (key in objB) {\n    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = shallowEqual;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/shallowEqual.js\n ** module id = 24\n ** module chunks = 0\n **/"],"sourceRoot":""}